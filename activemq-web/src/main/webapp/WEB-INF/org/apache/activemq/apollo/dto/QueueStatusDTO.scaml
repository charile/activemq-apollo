- import it._
- val helper = new org.apache.activemq.apollo.web.resources.ViewHelper
- import helper._

%h1 Queue: #{id}

%h2 Current Size

%p queue size: #{queue_items} messages
%p queue size: #{memory(queue_size)}
%p memory used: #{ "%,.2f".format(capacity_used.toFloat*100.0/capacity) } (#{memory(capacity_used)}/#{memory(capacity)})

%h2 Enqueue/Deqeueue Counters

%p enqueued: #{enqueue_item_counter} messages
%p enqueued: #{memory(enqueue_size_counter)}

%p dequeued: #{dequeue_item_counter} messages
%p dequeued: #{memory(dequeue_size_counter)}

%p nacked: #{nack_item_counter} messages
%p nacked: #{memory(nack_size_counter)}

%h2 Memory Mangement

%p loading from the store: #{memory(loading_size)}
%p flushing out of memory: #{memory(flushing_size)}
%p holding : #{flushed_items} flushed message references

- if ( entries.isEmpty )
  %h2
    Entries Dump
    %a(href={ id+"?entries=true" }) (Show)
- else
  %h2
    Entries Dump
    %a(href={ id })  (Hide)
  %table
    %tr
      %th type
      %th seq
      %th count
      %th size
      %th consumers
      %th prefetched

    - for( x <- entries )
      %tr
        %td #{x.state}
        %td #{x.seq}
        %td #{x.count}
        %td #{x.size}
        %td #{x.consumer_count}
        %td #{x.prefetch_count}

