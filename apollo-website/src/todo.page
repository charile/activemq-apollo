---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

title: The TODO List
--- name:overview

{project_slogan:}

--- name:content

# The TODO List

Stuff that still needs to get done.  Contributions Welcomed!

## Transactions

Transaction support is not yet implemented.

The current plan is for protocols to create a private Queue type object per
open transaction session. Every transactional operation would get enqueued to
the queue (begin, send, ack, prepare, commit, rollback, etc.). On commit, the
transaction operations would be dequeued and performed, messages acked, or
sent to the Router for delivery. Using queue allows us to support recoverable
transactions needed to support XA, also lets us support large transactions
since queues already know how to swap queue entries out of memory if needed.

## Durable Subscriptions

Durable subscriptions should be Queues which are attached to a topic
destination so that it gets a copy of every message sent to the topic. It
will involve:

* Enhancing the store interfaces to persistently keep track of the created
  subscriptions and the queue that they are associated with.
* Router needs to be enhanced to route to the queues and have durable
  subscriptions subscribe to it's queue instead of the topic.

## Queue Features

Queues are being kept simple for now since Apollo has been focused on making
them more scaleable, in terms giving good performance even when they are
holding a large number of messages.  The plan is to also use them to support
durable subscriptions and transactions which the features below may not apply 
so it may be best to first implement those features with queues so that 
the common queue features/abstractions can be determined.

* Priority Queues: Needs some more thought on how to best implement
* Message Expiration
* Scheduled Delivery
* Message Groups / Stick Routing
* Exclusive Consumers

## Broker Networks, a.k.a Federations

Broker networks are typically use to horizontally scale the processing
capacity of a messaging system.

* ideally something based on this [Network Design]({relocatable:/network-design.html})

* network layer will need to hook into the Router class so that it can
  directly forward to master brokers for a destination.

## Protocol Support

The initial protocol implementation was STOMP because it is popular yet easy
to implement, but Apollo has been designed to support multiple protocol
concurrently.

### ActiveMQ 5.x Openwire Support

Once ActiveMQ 5.x's Openwire protocol is fully supported, the broker will be
fully JMS compliant and have tight integration with J2EE servers since we can
just reuse the ActiveMQ 5.x client and J2EE resource adapter implementations.  It would 
also provide existing ActiveMQ users a smoother migration path to Apollo.

Implementation should be not be hard once Apollo support the the features
that Openwire requires like transaction support.  We should be able
to reuse it's codecs and most of the ActiveMQ unit tests.

### AMQP 1.0 Support

AMQP 1.0 is now available for public review and implementors are being
encouraged to build prototypes and provide feedback. Supporting a standardized
messaging protocol like AMQP would be a killer feature.

Implementation will be more tricky since there the spec is so new there and
a freely available compliance test suite is not yet available.

But the first steps needed is to:

* Build or find a good AMQP 1.0 codec
  library. Perhaps: 
  [HawtBuf AMQP library](http://github.com/chirino/hawtbuf/tree/master/hawtbuf-amqp/)  
* Get involved with [AMQP Client Dev Group](http://groups.google.com/group/amqp-client-dev)
  to make sure the Apollo implementation works well with 1.0 clients
* Provide feedback to the AMQP working group to resolve ambiguities in the
  spec

## Standalone Server Process

The standalone broker would be probably best implemented as a set of OSGi
services running in Apache Karaf. Karaf is an OSGi based server component
framework.

* Implement Karaf 'features' bundles for the Apollo services
* Setup a customized binary distribution of Karaf with the ActiveMQ features.
* Used an embedded Jetty to host the management interfaces of Apollo

## JMX

The REST based management interface will be the primary management interface
for Apollo, but there are a tremendous number of existing tools that can
generically work against JMX interfaces, so having some level of support
for JMX would help folks out.

We should make sure that the JMX view stay course grained so that the broker
avoids avoids registering large number of JMX objects to avoid bottlenecks in
the JMX layer.

## IoC / Container Integration

### Spring Integration

Need to make sure it easy to:

* configure and embedded broker in Spring xml files

We should put all the spring bits in an apollo-spring module to avoid tightly
coupling the broker with Spring like was the case with the 5.x version of the
broker.

## High Availability 

The Cassandra based message store can provide High Availability of the 
messages it stores when run against a Cassandra cluster with the proper 
amount of replication.  Additional smarts are going to be needed to take
care of starting up new brokers to take over the persistent messages 
of broker nodes that have failed.  Also more testing is needed in general
for scalability, error handling, and the handling of inconsistencies that 
could occur due to the relaxed consistency model Cassandra supports.




