//
// Generated by protoc, do not edit by hand.
//
package org.apache.activemq.broker.store.hawtdb;

public class Data {

   public static enum Type {

      MESSAGE_ADD("MESSAGE_ADD", 0),
      QUEUE_ADD("QUEUE_ADD", 10),
      QUEUE_REMOVE("QUEUE_REMOVE", 11),
      QUEUE_ADD_MESSAGE("QUEUE_ADD_MESSAGE", 12),
      QUEUE_REMOVE_MESSAGE("QUEUE_REMOVE_MESSAGE", 13),
      TRANSACTION_BEGIN("TRANSACTION_BEGIN", 20),
      TRANSACTION_ADD_MESSAGE("TRANSACTION_ADD_MESSAGE", 21),
      TRANSACTION_REMOVE_MESSAGE("TRANSACTION_REMOVE_MESSAGE", 22),
      TRANSACTION_COMMIT("TRANSACTION_COMMIT", 23),
      TRANSACTION_ROLLBACK("TRANSACTION_ROLLBACK", 24),
      MAP_ADD("MAP_ADD", 30),
      MAP_REMOVE("MAP_REMOVE", 31),
      MAP_ENTRY_PUT("MAP_ENTRY_PUT", 32),
      MAP_ENTRY_REMOVE("MAP_ENTRY_REMOVE", 33),
      STREAM_OPEN("STREAM_OPEN", 40),
      STREAM_WRITE("STREAM_WRITE", 41),
      STREAM_CLOSE("STREAM_CLOSE", 42),
      STREAM_REMOVE("STREAM_REMOVE", 43),
      SUBSCRIPTION_ADD("SUBSCRIPTION_ADD", 50),
      SUBSCRIPTION_REMOVE("SUBSCRIPTION_REMOVE", 51),
      TRACE("TRACE", 100);

      private final String name;
      private final int value;

      private Type(String name, int value) {
         this.name = name;
         this.value = value;
      }

      public final int getNumber() {
         return value;
      }

      public final String toString() {
         return name;
      }

      public static Type valueOf(int value) {
         switch (value) {
         case 0:
            return MESSAGE_ADD;
         case 10:
            return QUEUE_ADD;
         case 11:
            return QUEUE_REMOVE;
         case 12:
            return QUEUE_ADD_MESSAGE;
         case 13:
            return QUEUE_REMOVE_MESSAGE;
         case 20:
            return TRANSACTION_BEGIN;
         case 21:
            return TRANSACTION_ADD_MESSAGE;
         case 22:
            return TRANSACTION_REMOVE_MESSAGE;
         case 23:
            return TRANSACTION_COMMIT;
         case 24:
            return TRANSACTION_ROLLBACK;
         case 30:
            return MAP_ADD;
         case 31:
            return MAP_REMOVE;
         case 32:
            return MAP_ENTRY_PUT;
         case 33:
            return MAP_ENTRY_REMOVE;
         case 40:
            return STREAM_OPEN;
         case 41:
            return STREAM_WRITE;
         case 42:
            return STREAM_CLOSE;
         case 43:
            return STREAM_REMOVE;
         case 50:
            return SUBSCRIPTION_ADD;
         case 51:
            return SUBSCRIPTION_REMOVE;
         case 100:
            return TRACE;
         default:
            return null;
         }
      }

      public interface TypeCreatable {
         Type toType();
      }

      public TypeCreatable createBean() {
         switch (this) {
            case MESSAGE_ADD:
               return new MessageAdd.MessageAddBean();
            case QUEUE_ADD:
               return new QueueAdd.QueueAddBean();
            case QUEUE_REMOVE:
               return new QueueRemove.QueueRemoveBean();
            case QUEUE_ADD_MESSAGE:
               return new QueueAddMessage.QueueAddMessageBean();
            case QUEUE_REMOVE_MESSAGE:
               return new QueueRemoveMessage.QueueRemoveMessageBean();
            case TRANSACTION_BEGIN:
               return new TransactionBegin.TransactionBeginBean();
            case TRANSACTION_ADD_MESSAGE:
               return new TransactionAddMessage.TransactionAddMessageBean();
            case TRANSACTION_REMOVE_MESSAGE:
               return new TransactionRemoveMessage.TransactionRemoveMessageBean();
            case TRANSACTION_COMMIT:
               return new TransactionCommit.TransactionCommitBean();
            case TRANSACTION_ROLLBACK:
               return new TransactionRollback.TransactionRollbackBean();
            case MAP_ADD:
               return new MapAdd.MapAddBean();
            case MAP_REMOVE:
               return new MapRemove.MapRemoveBean();
            case MAP_ENTRY_PUT:
               return new MapEntryPut.MapEntryPutBean();
            case MAP_ENTRY_REMOVE:
               return new MapEntryRemove.MapEntryRemoveBean();
            case STREAM_OPEN:
               return new StreamOpen.StreamOpenBean();
            case STREAM_WRITE:
               return new StreamWrite.StreamWriteBean();
            case STREAM_CLOSE:
               return new StreamClose.StreamCloseBean();
            case STREAM_REMOVE:
               return new StreamRemove.StreamRemoveBean();
            case SUBSCRIPTION_ADD:
               return new SubscriptionAdd.SubscriptionAddBean();
            case SUBSCRIPTION_REMOVE:
               return new SubscriptionRemove.SubscriptionRemoveBean();
            case TRACE:
               return new Trace.TraceBean();
            default:
               return null;
         }
      }

      public org.fusesource.hawtbuf.proto.MessageBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         switch (this) {
            case MESSAGE_ADD:
               return MessageAdd.MessageAddBuffer.parseUnframed(data);
            case QUEUE_ADD:
               return QueueAdd.QueueAddBuffer.parseUnframed(data);
            case QUEUE_REMOVE:
               return QueueRemove.QueueRemoveBuffer.parseUnframed(data);
            case QUEUE_ADD_MESSAGE:
               return QueueAddMessage.QueueAddMessageBuffer.parseUnframed(data);
            case QUEUE_REMOVE_MESSAGE:
               return QueueRemoveMessage.QueueRemoveMessageBuffer.parseUnframed(data);
            case TRANSACTION_BEGIN:
               return TransactionBegin.TransactionBeginBuffer.parseUnframed(data);
            case TRANSACTION_ADD_MESSAGE:
               return TransactionAddMessage.TransactionAddMessageBuffer.parseUnframed(data);
            case TRANSACTION_REMOVE_MESSAGE:
               return TransactionRemoveMessage.TransactionRemoveMessageBuffer.parseUnframed(data);
            case TRANSACTION_COMMIT:
               return TransactionCommit.TransactionCommitBuffer.parseUnframed(data);
            case TRANSACTION_ROLLBACK:
               return TransactionRollback.TransactionRollbackBuffer.parseUnframed(data);
            case MAP_ADD:
               return MapAdd.MapAddBuffer.parseUnframed(data);
            case MAP_REMOVE:
               return MapRemove.MapRemoveBuffer.parseUnframed(data);
            case MAP_ENTRY_PUT:
               return MapEntryPut.MapEntryPutBuffer.parseUnframed(data);
            case MAP_ENTRY_REMOVE:
               return MapEntryRemove.MapEntryRemoveBuffer.parseUnframed(data);
            case STREAM_OPEN:
               return StreamOpen.StreamOpenBuffer.parseUnframed(data);
            case STREAM_WRITE:
               return StreamWrite.StreamWriteBuffer.parseUnframed(data);
            case STREAM_CLOSE:
               return StreamClose.StreamCloseBuffer.parseUnframed(data);
            case STREAM_REMOVE:
               return StreamRemove.StreamRemoveBuffer.parseUnframed(data);
            case SUBSCRIPTION_ADD:
               return SubscriptionAdd.SubscriptionAddBuffer.parseUnframed(data);
            case SUBSCRIPTION_REMOVE:
               return SubscriptionRemove.SubscriptionRemoveBuffer.parseUnframed(data);
            case TRACE:
               return Trace.TraceBuffer.parseUnframed(data);
            default:
               return null;
         }
      }

      public org.fusesource.hawtbuf.proto.MessageBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         switch (this) {
            case MESSAGE_ADD:
               return MessageAdd.MessageAddBuffer.parseFramed(data);
            case QUEUE_ADD:
               return QueueAdd.QueueAddBuffer.parseFramed(data);
            case QUEUE_REMOVE:
               return QueueRemove.QueueRemoveBuffer.parseFramed(data);
            case QUEUE_ADD_MESSAGE:
               return QueueAddMessage.QueueAddMessageBuffer.parseFramed(data);
            case QUEUE_REMOVE_MESSAGE:
               return QueueRemoveMessage.QueueRemoveMessageBuffer.parseFramed(data);
            case TRANSACTION_BEGIN:
               return TransactionBegin.TransactionBeginBuffer.parseFramed(data);
            case TRANSACTION_ADD_MESSAGE:
               return TransactionAddMessage.TransactionAddMessageBuffer.parseFramed(data);
            case TRANSACTION_REMOVE_MESSAGE:
               return TransactionRemoveMessage.TransactionRemoveMessageBuffer.parseFramed(data);
            case TRANSACTION_COMMIT:
               return TransactionCommit.TransactionCommitBuffer.parseFramed(data);
            case TRANSACTION_ROLLBACK:
               return TransactionRollback.TransactionRollbackBuffer.parseFramed(data);
            case MAP_ADD:
               return MapAdd.MapAddBuffer.parseFramed(data);
            case MAP_REMOVE:
               return MapRemove.MapRemoveBuffer.parseFramed(data);
            case MAP_ENTRY_PUT:
               return MapEntryPut.MapEntryPutBuffer.parseFramed(data);
            case MAP_ENTRY_REMOVE:
               return MapEntryRemove.MapEntryRemoveBuffer.parseFramed(data);
            case STREAM_OPEN:
               return StreamOpen.StreamOpenBuffer.parseFramed(data);
            case STREAM_WRITE:
               return StreamWrite.StreamWriteBuffer.parseFramed(data);
            case STREAM_CLOSE:
               return StreamClose.StreamCloseBuffer.parseFramed(data);
            case STREAM_REMOVE:
               return StreamRemove.StreamRemoveBuffer.parseFramed(data);
            case SUBSCRIPTION_ADD:
               return SubscriptionAdd.SubscriptionAddBuffer.parseFramed(data);
            case SUBSCRIPTION_REMOVE:
               return SubscriptionRemove.SubscriptionRemoveBuffer.parseFramed(data);
            case TRACE:
               return Trace.TraceBuffer.parseFramed(data);
            default:
               return null;
         }
      }

      public org.fusesource.hawtbuf.proto.MessageBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         switch (this) {
            case MESSAGE_ADD:
               return MessageAdd.MessageAddBuffer.parseUnframed(data);
            case QUEUE_ADD:
               return QueueAdd.QueueAddBuffer.parseUnframed(data);
            case QUEUE_REMOVE:
               return QueueRemove.QueueRemoveBuffer.parseUnframed(data);
            case QUEUE_ADD_MESSAGE:
               return QueueAddMessage.QueueAddMessageBuffer.parseUnframed(data);
            case QUEUE_REMOVE_MESSAGE:
               return QueueRemoveMessage.QueueRemoveMessageBuffer.parseUnframed(data);
            case TRANSACTION_BEGIN:
               return TransactionBegin.TransactionBeginBuffer.parseUnframed(data);
            case TRANSACTION_ADD_MESSAGE:
               return TransactionAddMessage.TransactionAddMessageBuffer.parseUnframed(data);
            case TRANSACTION_REMOVE_MESSAGE:
               return TransactionRemoveMessage.TransactionRemoveMessageBuffer.parseUnframed(data);
            case TRANSACTION_COMMIT:
               return TransactionCommit.TransactionCommitBuffer.parseUnframed(data);
            case TRANSACTION_ROLLBACK:
               return TransactionRollback.TransactionRollbackBuffer.parseUnframed(data);
            case MAP_ADD:
               return MapAdd.MapAddBuffer.parseUnframed(data);
            case MAP_REMOVE:
               return MapRemove.MapRemoveBuffer.parseUnframed(data);
            case MAP_ENTRY_PUT:
               return MapEntryPut.MapEntryPutBuffer.parseUnframed(data);
            case MAP_ENTRY_REMOVE:
               return MapEntryRemove.MapEntryRemoveBuffer.parseUnframed(data);
            case STREAM_OPEN:
               return StreamOpen.StreamOpenBuffer.parseUnframed(data);
            case STREAM_WRITE:
               return StreamWrite.StreamWriteBuffer.parseUnframed(data);
            case STREAM_CLOSE:
               return StreamClose.StreamCloseBuffer.parseUnframed(data);
            case STREAM_REMOVE:
               return StreamRemove.StreamRemoveBuffer.parseUnframed(data);
            case SUBSCRIPTION_ADD:
               return SubscriptionAdd.SubscriptionAddBuffer.parseUnframed(data);
            case SUBSCRIPTION_REMOVE:
               return SubscriptionRemove.SubscriptionRemoveBuffer.parseUnframed(data);
            case TRACE:
               return Trace.TraceBuffer.parseUnframed(data);
            default:
               return null;
         }
      }

      public org.fusesource.hawtbuf.proto.MessageBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         switch (this) {
            case MESSAGE_ADD:
               return MessageAdd.MessageAddBuffer.parseFramed(data);
            case QUEUE_ADD:
               return QueueAdd.QueueAddBuffer.parseFramed(data);
            case QUEUE_REMOVE:
               return QueueRemove.QueueRemoveBuffer.parseFramed(data);
            case QUEUE_ADD_MESSAGE:
               return QueueAddMessage.QueueAddMessageBuffer.parseFramed(data);
            case QUEUE_REMOVE_MESSAGE:
               return QueueRemoveMessage.QueueRemoveMessageBuffer.parseFramed(data);
            case TRANSACTION_BEGIN:
               return TransactionBegin.TransactionBeginBuffer.parseFramed(data);
            case TRANSACTION_ADD_MESSAGE:
               return TransactionAddMessage.TransactionAddMessageBuffer.parseFramed(data);
            case TRANSACTION_REMOVE_MESSAGE:
               return TransactionRemoveMessage.TransactionRemoveMessageBuffer.parseFramed(data);
            case TRANSACTION_COMMIT:
               return TransactionCommit.TransactionCommitBuffer.parseFramed(data);
            case TRANSACTION_ROLLBACK:
               return TransactionRollback.TransactionRollbackBuffer.parseFramed(data);
            case MAP_ADD:
               return MapAdd.MapAddBuffer.parseFramed(data);
            case MAP_REMOVE:
               return MapRemove.MapRemoveBuffer.parseFramed(data);
            case MAP_ENTRY_PUT:
               return MapEntryPut.MapEntryPutBuffer.parseFramed(data);
            case MAP_ENTRY_REMOVE:
               return MapEntryRemove.MapEntryRemoveBuffer.parseFramed(data);
            case STREAM_OPEN:
               return StreamOpen.StreamOpenBuffer.parseFramed(data);
            case STREAM_WRITE:
               return StreamWrite.StreamWriteBuffer.parseFramed(data);
            case STREAM_CLOSE:
               return StreamClose.StreamCloseBuffer.parseFramed(data);
            case STREAM_REMOVE:
               return StreamRemove.StreamRemoveBuffer.parseFramed(data);
            case SUBSCRIPTION_ADD:
               return SubscriptionAdd.SubscriptionAddBuffer.parseFramed(data);
            case SUBSCRIPTION_REMOVE:
               return SubscriptionRemove.SubscriptionRemoveBuffer.parseFramed(data);
            case TRACE:
               return Trace.TraceBuffer.parseFramed(data);
            default:
               return null;
         }
      }

      public org.fusesource.hawtbuf.proto.MessageBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         switch (this) {
            case MESSAGE_ADD:
               return MessageAdd.MessageAddBuffer.parseFramed(data);
            case QUEUE_ADD:
               return QueueAdd.QueueAddBuffer.parseFramed(data);
            case QUEUE_REMOVE:
               return QueueRemove.QueueRemoveBuffer.parseFramed(data);
            case QUEUE_ADD_MESSAGE:
               return QueueAddMessage.QueueAddMessageBuffer.parseFramed(data);
            case QUEUE_REMOVE_MESSAGE:
               return QueueRemoveMessage.QueueRemoveMessageBuffer.parseFramed(data);
            case TRANSACTION_BEGIN:
               return TransactionBegin.TransactionBeginBuffer.parseFramed(data);
            case TRANSACTION_ADD_MESSAGE:
               return TransactionAddMessage.TransactionAddMessageBuffer.parseFramed(data);
            case TRANSACTION_REMOVE_MESSAGE:
               return TransactionRemoveMessage.TransactionRemoveMessageBuffer.parseFramed(data);
            case TRANSACTION_COMMIT:
               return TransactionCommit.TransactionCommitBuffer.parseFramed(data);
            case TRANSACTION_ROLLBACK:
               return TransactionRollback.TransactionRollbackBuffer.parseFramed(data);
            case MAP_ADD:
               return MapAdd.MapAddBuffer.parseFramed(data);
            case MAP_REMOVE:
               return MapRemove.MapRemoveBuffer.parseFramed(data);
            case MAP_ENTRY_PUT:
               return MapEntryPut.MapEntryPutBuffer.parseFramed(data);
            case MAP_ENTRY_REMOVE:
               return MapEntryRemove.MapEntryRemoveBuffer.parseFramed(data);
            case STREAM_OPEN:
               return StreamOpen.StreamOpenBuffer.parseFramed(data);
            case STREAM_WRITE:
               return StreamWrite.StreamWriteBuffer.parseFramed(data);
            case STREAM_CLOSE:
               return StreamClose.StreamCloseBuffer.parseFramed(data);
            case STREAM_REMOVE:
               return StreamRemove.StreamRemoveBuffer.parseFramed(data);
            case SUBSCRIPTION_ADD:
               return SubscriptionAdd.SubscriptionAddBuffer.parseFramed(data);
            case SUBSCRIPTION_REMOVE:
               return SubscriptionRemove.SubscriptionRemoveBuffer.parseFramed(data);
            case TRACE:
               return Trace.TraceBuffer.parseFramed(data);
            default:
               return null;
         }
      }

      public org.fusesource.hawtbuf.proto.MessageBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         switch (this) {
            case MESSAGE_ADD:
               return MessageAdd.MessageAddBuffer.parseFramed(data);
            case QUEUE_ADD:
               return QueueAdd.QueueAddBuffer.parseFramed(data);
            case QUEUE_REMOVE:
               return QueueRemove.QueueRemoveBuffer.parseFramed(data);
            case QUEUE_ADD_MESSAGE:
               return QueueAddMessage.QueueAddMessageBuffer.parseFramed(data);
            case QUEUE_REMOVE_MESSAGE:
               return QueueRemoveMessage.QueueRemoveMessageBuffer.parseFramed(data);
            case TRANSACTION_BEGIN:
               return TransactionBegin.TransactionBeginBuffer.parseFramed(data);
            case TRANSACTION_ADD_MESSAGE:
               return TransactionAddMessage.TransactionAddMessageBuffer.parseFramed(data);
            case TRANSACTION_REMOVE_MESSAGE:
               return TransactionRemoveMessage.TransactionRemoveMessageBuffer.parseFramed(data);
            case TRANSACTION_COMMIT:
               return TransactionCommit.TransactionCommitBuffer.parseFramed(data);
            case TRANSACTION_ROLLBACK:
               return TransactionRollback.TransactionRollbackBuffer.parseFramed(data);
            case MAP_ADD:
               return MapAdd.MapAddBuffer.parseFramed(data);
            case MAP_REMOVE:
               return MapRemove.MapRemoveBuffer.parseFramed(data);
            case MAP_ENTRY_PUT:
               return MapEntryPut.MapEntryPutBuffer.parseFramed(data);
            case MAP_ENTRY_REMOVE:
               return MapEntryRemove.MapEntryRemoveBuffer.parseFramed(data);
            case STREAM_OPEN:
               return StreamOpen.StreamOpenBuffer.parseFramed(data);
            case STREAM_WRITE:
               return StreamWrite.StreamWriteBuffer.parseFramed(data);
            case STREAM_CLOSE:
               return StreamClose.StreamCloseBuffer.parseFramed(data);
            case STREAM_REMOVE:
               return StreamRemove.StreamRemoveBuffer.parseFramed(data);
            case SUBSCRIPTION_ADD:
               return SubscriptionAdd.SubscriptionAddBuffer.parseFramed(data);
            case SUBSCRIPTION_REMOVE:
               return SubscriptionRemove.SubscriptionRemoveBuffer.parseFramed(data);
            case TRACE:
               return Trace.TraceBuffer.parseFramed(data);
            default:
               return null;
         }
      }

   }


   static public interface Trace extends org.fusesource.hawtbuf.proto.PBMessage<Trace.TraceBean, Trace.TraceBuffer>, Type.TypeCreatable {

      // optional bytes message = 2;
      public boolean hasMessage();
      public org.fusesource.hawtbuf.AsciiBuffer getMessage();
      public TraceBean copy();
      public TraceBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class TraceBean implements Trace {

         TraceBuffer frozen;
         TraceBean bean;

         public TraceBean() {
            this.bean = this;
         }

         public TraceBean(TraceBean copy) {
            this.bean = copy;
         }

         public TraceBean copy() {
            return new TraceBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public TraceBuffer freeze() {
            if( frozen==null ) {
               frozen = new TraceBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(TraceBean other) {
            this.bean = this;
            this.f_message = other.f_message;
            this.b_message = other.b_message;
         }

         // optional bytes message = 2;
         private org.fusesource.hawtbuf.AsciiBuffer f_message = null;
         private boolean b_message;

         public boolean hasMessage() {
            return bean.b_message;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getMessage() {
            return bean.f_message;
         }

         public TraceBean setMessage(org.fusesource.hawtbuf.AsciiBuffer message) {
            copyCheck();
            this.b_message = true;
            this.f_message = message;
            return this;
         }

         public void clearMessage() {
            copyCheck();
            this.b_message = false;
            this.f_message = null;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasMessage() ) {
               sb.append(prefix+"message: ");
               sb.append(getMessage());
               sb.append("\n");
            }
            return sb;
         }

         public TraceBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public TraceBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 18:
                  setMessage(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=TraceBean.class )
               return false;
            
            return equals((TraceBean)obj);
         }
         
         public boolean equals(TraceBean obj) {
            if (hasMessage() ^ obj.hasMessage() ) 
               return false;
            if (hasMessage() && ( !getMessage().equals(obj.getMessage()) ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=-1567265163;
            if (hasMessage()) {
               rc ^= ( -1675388953^getMessage().hashCode() );
            }
            return rc;
         }
         
         public TraceBean mergeFrom(Trace other) {
            copyCheck();
            if (other.hasMessage()) {
               setMessage(other.getMessage());
            }
            return this;
         }

         public void clear() {
            clearMessage();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_message = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_message = true;
               } else {
                  f_message = null;
                  b_message = false;
               }
            }
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_message!=null ) {
               out.writeInt(bean.f_message.getLength());
               out.write(bean.f_message.getData(), bean.f_message.getOffset(), bean.f_message.getLength());
            } else {
               out.writeInt(-1);
            }
         }

         public Type toType() {
            return Type.TRACE;
         }

      }

      static public final class TraceBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<Trace.TraceBean, Trace.TraceBuffer>, Trace {

         private TraceBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private TraceBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private TraceBuffer(TraceBean bean) {
            this.bean = bean;
         }

         public TraceBean copy() {
            return bean().copy();
         }

         public TraceBuffer freeze() {
            return this;
         }

         private TraceBean bean() {
            if (bean == null) {
               try {
                  bean = new TraceBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional bytes message = 2;
         public boolean hasMessage() {
            return bean().hasMessage();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getMessage() {
            return bean().getMessage();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasMessage()) {
                  output.writeBytes(2, bean.getMessage());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasMessage()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(2, getMessage());
            }
            return size;
         }

         public static TraceBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new TraceBean().mergeUnframed(data);
         }

         public static TraceBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static TraceBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new TraceBuffer(data);
         }

         public static TraceBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static TraceBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            TraceBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static TraceBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               TraceBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static TraceBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static TraceBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=TraceBuffer.class )
               return false;
            
            return equals((TraceBuffer)obj);
         }
         
         public boolean equals(TraceBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=1406620101 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.TRACE;
         }

      }

   }


   static public interface MessageAdd extends org.fusesource.hawtbuf.proto.PBMessage<MessageAdd.MessageAddBean, MessageAdd.MessageAddBuffer>, Type.TypeCreatable {

      // optional int64 messageKey = 1;
      public boolean hasMessageKey();
      public long getMessageKey();
      // optional bytes messageId = 2;
      public boolean hasMessageId();
      public org.fusesource.hawtbuf.AsciiBuffer getMessageId();
      // optional bytes encoding = 3;
      public boolean hasEncoding();
      public org.fusesource.hawtbuf.AsciiBuffer getEncoding();
      // optional bytes buffer = 4;
      public boolean hasBuffer();
      public org.fusesource.hawtbuf.Buffer getBuffer();
      // optional int64 streamKey = 5;
      public boolean hasStreamKey();
      public long getStreamKey();
      // optional int32 messageSize = 6;
      public boolean hasMessageSize();
      public int getMessageSize();
      public MessageAddBean copy();
      public MessageAddBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class MessageAddBean implements MessageAdd {

         MessageAddBuffer frozen;
         MessageAddBean bean;

         public MessageAddBean() {
            this.bean = this;
         }

         public MessageAddBean(MessageAddBean copy) {
            this.bean = copy;
         }

         public MessageAddBean copy() {
            return new MessageAddBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public MessageAddBuffer freeze() {
            if( frozen==null ) {
               frozen = new MessageAddBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(MessageAddBean other) {
            this.bean = this;
            this.f_messageKey = other.f_messageKey;
            this.b_messageKey = other.b_messageKey;
            this.f_messageId = other.f_messageId;
            this.b_messageId = other.b_messageId;
            this.f_encoding = other.f_encoding;
            this.b_encoding = other.b_encoding;
            this.f_buffer = other.f_buffer;
            this.b_buffer = other.b_buffer;
            this.f_streamKey = other.f_streamKey;
            this.b_streamKey = other.b_streamKey;
            this.f_messageSize = other.f_messageSize;
            this.b_messageSize = other.b_messageSize;
         }

         // optional int64 messageKey = 1;
         private long f_messageKey = 0;
         private boolean b_messageKey;

         public boolean hasMessageKey() {
            return bean.b_messageKey;
         }

         public long getMessageKey() {
            return bean.f_messageKey;
         }

         public MessageAddBean setMessageKey(long messageKey) {
            copyCheck();
            this.b_messageKey = true;
            this.f_messageKey = messageKey;
            return this;
         }

         public void clearMessageKey() {
            copyCheck();
            this.b_messageKey = false;
            this.f_messageKey = 0;
         }

         // optional bytes messageId = 2;
         private org.fusesource.hawtbuf.AsciiBuffer f_messageId = null;
         private boolean b_messageId;

         public boolean hasMessageId() {
            return bean.b_messageId;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getMessageId() {
            return bean.f_messageId;
         }

         public MessageAddBean setMessageId(org.fusesource.hawtbuf.AsciiBuffer messageId) {
            copyCheck();
            this.b_messageId = true;
            this.f_messageId = messageId;
            return this;
         }

         public void clearMessageId() {
            copyCheck();
            this.b_messageId = false;
            this.f_messageId = null;
         }

         // optional bytes encoding = 3;
         private org.fusesource.hawtbuf.AsciiBuffer f_encoding = null;
         private boolean b_encoding;

         public boolean hasEncoding() {
            return bean.b_encoding;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getEncoding() {
            return bean.f_encoding;
         }

         public MessageAddBean setEncoding(org.fusesource.hawtbuf.AsciiBuffer encoding) {
            copyCheck();
            this.b_encoding = true;
            this.f_encoding = encoding;
            return this;
         }

         public void clearEncoding() {
            copyCheck();
            this.b_encoding = false;
            this.f_encoding = null;
         }

         // optional bytes buffer = 4;
         private org.fusesource.hawtbuf.Buffer f_buffer = null;
         private boolean b_buffer;

         public boolean hasBuffer() {
            return bean.b_buffer;
         }

         public org.fusesource.hawtbuf.Buffer getBuffer() {
            return bean.f_buffer;
         }

         public MessageAddBean setBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            copyCheck();
            this.b_buffer = true;
            this.f_buffer = buffer;
            return this;
         }

         public void clearBuffer() {
            copyCheck();
            this.b_buffer = false;
            this.f_buffer = null;
         }

         // optional int64 streamKey = 5;
         private long f_streamKey = 0;
         private boolean b_streamKey;

         public boolean hasStreamKey() {
            return bean.b_streamKey;
         }

         public long getStreamKey() {
            return bean.f_streamKey;
         }

         public MessageAddBean setStreamKey(long streamKey) {
            copyCheck();
            this.b_streamKey = true;
            this.f_streamKey = streamKey;
            return this;
         }

         public void clearStreamKey() {
            copyCheck();
            this.b_streamKey = false;
            this.f_streamKey = 0;
         }

         // optional int32 messageSize = 6;
         private int f_messageSize = 0;
         private boolean b_messageSize;

         public boolean hasMessageSize() {
            return bean.b_messageSize;
         }

         public int getMessageSize() {
            return bean.f_messageSize;
         }

         public MessageAddBean setMessageSize(int messageSize) {
            copyCheck();
            this.b_messageSize = true;
            this.f_messageSize = messageSize;
            return this;
         }

         public void clearMessageSize() {
            copyCheck();
            this.b_messageSize = false;
            this.f_messageSize = 0;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasMessageKey() ) {
               sb.append(prefix+"messageKey: ");
               sb.append(getMessageKey());
               sb.append("\n");
            }
            if(  hasMessageId() ) {
               sb.append(prefix+"messageId: ");
               sb.append(getMessageId());
               sb.append("\n");
            }
            if(  hasEncoding() ) {
               sb.append(prefix+"encoding: ");
               sb.append(getEncoding());
               sb.append("\n");
            }
            if(  hasBuffer() ) {
               sb.append(prefix+"buffer: ");
               sb.append(getBuffer());
               sb.append("\n");
            }
            if(  hasStreamKey() ) {
               sb.append(prefix+"streamKey: ");
               sb.append(getStreamKey());
               sb.append("\n");
            }
            if(  hasMessageSize() ) {
               sb.append(prefix+"messageSize: ");
               sb.append(getMessageSize());
               sb.append("\n");
            }
            return sb;
         }

         public MessageAddBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public MessageAddBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 8:
                  setMessageKey(input.readInt64());
                  break;
               case 18:
                  setMessageId(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               case 26:
                  setEncoding(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               case 34:
                  setBuffer(input.readBytes());
                  break;
               case 40:
                  setStreamKey(input.readInt64());
                  break;
               case 48:
                  setMessageSize(input.readInt32());
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=MessageAddBean.class )
               return false;
            
            return equals((MessageAddBean)obj);
         }
         
         public boolean equals(MessageAddBean obj) {
            if (hasMessageKey() ^ obj.hasMessageKey() ) 
               return false;
            if (hasMessageKey() && ( getMessageKey()!=obj.getMessageKey() ))
               return false;
            if (hasMessageId() ^ obj.hasMessageId() ) 
               return false;
            if (hasMessageId() && ( !getMessageId().equals(obj.getMessageId()) ))
               return false;
            if (hasEncoding() ^ obj.hasEncoding() ) 
               return false;
            if (hasEncoding() && ( !getEncoding().equals(obj.getEncoding()) ))
               return false;
            if (hasBuffer() ^ obj.hasBuffer() ) 
               return false;
            if (hasBuffer() && ( !getBuffer().equals(obj.getBuffer()) ))
               return false;
            if (hasStreamKey() ^ obj.hasStreamKey() ) 
               return false;
            if (hasStreamKey() && ( getStreamKey()!=obj.getStreamKey() ))
               return false;
            if (hasMessageSize() ^ obj.hasMessageSize() ) 
               return false;
            if (hasMessageSize() && ( getMessageSize()!=obj.getMessageSize() ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=-1294047734;
            if (hasMessageKey()) {
               rc ^= ( 302723320^(new Long(getMessageKey())).hashCode() );
            }
            if (hasMessageId()) {
               rc ^= ( 563954530^getMessageId().hashCode() );
            }
            if (hasEncoding()) {
               rc ^= ( 1775866227^getEncoding().hashCode() );
            }
            if (hasBuffer()) {
               rc ^= ( 2000715872^getBuffer().hashCode() );
            }
            if (hasStreamKey()) {
               rc ^= ( 1688323743^(new Long(getStreamKey())).hashCode() );
            }
            if (hasMessageSize()) {
               rc ^= ( 794730632^getMessageSize() );
            }
            return rc;
         }
         
         public MessageAddBean mergeFrom(MessageAdd other) {
            copyCheck();
            if (other.hasMessageKey()) {
               setMessageKey(other.getMessageKey());
            }
            if (other.hasMessageId()) {
               setMessageId(other.getMessageId());
            }
            if (other.hasEncoding()) {
               setEncoding(other.getEncoding());
            }
            if (other.hasBuffer()) {
               setBuffer(other.getBuffer());
            }
            if (other.hasStreamKey()) {
               setStreamKey(other.getStreamKey());
            }
            if (other.hasMessageSize()) {
               setMessageSize(other.getMessageSize());
            }
            return this;
         }

         public void clear() {
            clearMessageKey();
            clearMessageId();
            clearEncoding();
            clearBuffer();
            clearStreamKey();
            clearMessageSize();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            f_messageKey = in.readLong();
            b_messageKey = true;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_messageId = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_messageId = true;
               } else {
                  f_messageId = null;
                  b_messageId = false;
               }
            }
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_encoding = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_encoding = true;
               } else {
                  f_encoding = null;
                  b_encoding = false;
               }
            }
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_buffer = new org.fusesource.hawtbuf.Buffer(b);
                  b_buffer = true;
               } else {
                  f_buffer = null;
                  b_buffer = false;
               }
            }
            f_streamKey = in.readLong();
            b_streamKey = true;
            f_messageSize = in.readInt();
            b_messageSize = true;
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            out.writeLong(bean.f_messageKey);
            if( bean.f_messageId!=null ) {
               out.writeInt(bean.f_messageId.getLength());
               out.write(bean.f_messageId.getData(), bean.f_messageId.getOffset(), bean.f_messageId.getLength());
            } else {
               out.writeInt(-1);
            }
            if( bean.f_encoding!=null ) {
               out.writeInt(bean.f_encoding.getLength());
               out.write(bean.f_encoding.getData(), bean.f_encoding.getOffset(), bean.f_encoding.getLength());
            } else {
               out.writeInt(-1);
            }
            if( bean.f_buffer!=null ) {
               out.writeInt(bean.f_buffer.getLength());
               out.write(bean.f_buffer.getData(), bean.f_buffer.getOffset(), bean.f_buffer.getLength());
            } else {
               out.writeInt(-1);
            }
            out.writeLong(bean.f_streamKey);
            out.writeInt(bean.f_messageSize);
         }

         public Type toType() {
            return Type.MESSAGE_ADD;
         }

      }

      static public final class MessageAddBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<MessageAdd.MessageAddBean, MessageAdd.MessageAddBuffer>, MessageAdd {

         private MessageAddBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private MessageAddBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private MessageAddBuffer(MessageAddBean bean) {
            this.bean = bean;
         }

         public MessageAddBean copy() {
            return bean().copy();
         }

         public MessageAddBuffer freeze() {
            return this;
         }

         private MessageAddBean bean() {
            if (bean == null) {
               try {
                  bean = new MessageAddBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional int64 messageKey = 1;
         public boolean hasMessageKey() {
            return bean().hasMessageKey();
         }

         public long getMessageKey() {
            return bean().getMessageKey();
         }

         // optional bytes messageId = 2;
         public boolean hasMessageId() {
            return bean().hasMessageId();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getMessageId() {
            return bean().getMessageId();
         }

         // optional bytes encoding = 3;
         public boolean hasEncoding() {
            return bean().hasEncoding();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getEncoding() {
            return bean().getEncoding();
         }

         // optional bytes buffer = 4;
         public boolean hasBuffer() {
            return bean().hasBuffer();
         }

         public org.fusesource.hawtbuf.Buffer getBuffer() {
            return bean().getBuffer();
         }

         // optional int64 streamKey = 5;
         public boolean hasStreamKey() {
            return bean().hasStreamKey();
         }

         public long getStreamKey() {
            return bean().getStreamKey();
         }

         // optional int32 messageSize = 6;
         public boolean hasMessageSize() {
            return bean().hasMessageSize();
         }

         public int getMessageSize() {
            return bean().getMessageSize();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasMessageKey()) {
                  output.writeInt64(1, bean.getMessageKey());
               }
               if (bean.hasMessageId()) {
                  output.writeBytes(2, bean.getMessageId());
               }
               if (bean.hasEncoding()) {
                  output.writeBytes(3, bean.getEncoding());
               }
               if (bean.hasBuffer()) {
                  output.writeBytes(4, bean.getBuffer());
               }
               if (bean.hasStreamKey()) {
                  output.writeInt64(5, bean.getStreamKey());
               }
               if (bean.hasMessageSize()) {
                  output.writeInt32(6, bean.getMessageSize());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasMessageKey()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(1, getMessageKey());
            }
            if (hasMessageId()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(2, getMessageId());
            }
            if (hasEncoding()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(3, getEncoding());
            }
            if (hasBuffer()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(4, getBuffer());
            }
            if (hasStreamKey()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(5, getStreamKey());
            }
            if (hasMessageSize()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(6, getMessageSize());
            }
            return size;
         }

         public static MessageAddBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new MessageAddBean().mergeUnframed(data);
         }

         public static MessageAddBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static MessageAddBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new MessageAddBuffer(data);
         }

         public static MessageAddBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static MessageAddBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            MessageAddBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static MessageAddBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               MessageAddBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static MessageAddBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static MessageAddBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=MessageAddBuffer.class )
               return false;
            
            return equals((MessageAddBuffer)obj);
         }
         
         public boolean equals(MessageAddBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=1975564314 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.MESSAGE_ADD;
         }

      }

   }


   static public interface QueueAdd extends org.fusesource.hawtbuf.proto.PBMessage<QueueAdd.QueueAddBean, QueueAdd.QueueAddBuffer>, Type.TypeCreatable {

      // optional bytes queueName = 1;
      public boolean hasQueueName();
      public org.fusesource.hawtbuf.AsciiBuffer getQueueName();
      // optional int32 applicationType = 2;
      public boolean hasApplicationType();
      public int getApplicationType();
      // optional bytes parentName = 3;
      public boolean hasParentName();
      public org.fusesource.hawtbuf.AsciiBuffer getParentName();
      // optional int32 queueType = 4;
      public boolean hasQueueType();
      public int getQueueType();
      // optional int32 partitionId = 5;
      public boolean hasPartitionId();
      public int getPartitionId();
      public QueueAddBean copy();
      public QueueAddBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class QueueAddBean implements QueueAdd {

         QueueAddBuffer frozen;
         QueueAddBean bean;

         public QueueAddBean() {
            this.bean = this;
         }

         public QueueAddBean(QueueAddBean copy) {
            this.bean = copy;
         }

         public QueueAddBean copy() {
            return new QueueAddBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public QueueAddBuffer freeze() {
            if( frozen==null ) {
               frozen = new QueueAddBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(QueueAddBean other) {
            this.bean = this;
            this.f_queueName = other.f_queueName;
            this.b_queueName = other.b_queueName;
            this.f_applicationType = other.f_applicationType;
            this.b_applicationType = other.b_applicationType;
            this.f_parentName = other.f_parentName;
            this.b_parentName = other.b_parentName;
            this.f_queueType = other.f_queueType;
            this.b_queueType = other.b_queueType;
            this.f_partitionId = other.f_partitionId;
            this.b_partitionId = other.b_partitionId;
         }

         // optional bytes queueName = 1;
         private org.fusesource.hawtbuf.AsciiBuffer f_queueName = null;
         private boolean b_queueName;

         public boolean hasQueueName() {
            return bean.b_queueName;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getQueueName() {
            return bean.f_queueName;
         }

         public QueueAddBean setQueueName(org.fusesource.hawtbuf.AsciiBuffer queueName) {
            copyCheck();
            this.b_queueName = true;
            this.f_queueName = queueName;
            return this;
         }

         public void clearQueueName() {
            copyCheck();
            this.b_queueName = false;
            this.f_queueName = null;
         }

         // optional int32 applicationType = 2;
         private int f_applicationType = 0;
         private boolean b_applicationType;

         public boolean hasApplicationType() {
            return bean.b_applicationType;
         }

         public int getApplicationType() {
            return bean.f_applicationType;
         }

         public QueueAddBean setApplicationType(int applicationType) {
            copyCheck();
            this.b_applicationType = true;
            this.f_applicationType = applicationType;
            return this;
         }

         public void clearApplicationType() {
            copyCheck();
            this.b_applicationType = false;
            this.f_applicationType = 0;
         }

         // optional bytes parentName = 3;
         private org.fusesource.hawtbuf.AsciiBuffer f_parentName = null;
         private boolean b_parentName;

         public boolean hasParentName() {
            return bean.b_parentName;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getParentName() {
            return bean.f_parentName;
         }

         public QueueAddBean setParentName(org.fusesource.hawtbuf.AsciiBuffer parentName) {
            copyCheck();
            this.b_parentName = true;
            this.f_parentName = parentName;
            return this;
         }

         public void clearParentName() {
            copyCheck();
            this.b_parentName = false;
            this.f_parentName = null;
         }

         // optional int32 queueType = 4;
         private int f_queueType = 0;
         private boolean b_queueType;

         public boolean hasQueueType() {
            return bean.b_queueType;
         }

         public int getQueueType() {
            return bean.f_queueType;
         }

         public QueueAddBean setQueueType(int queueType) {
            copyCheck();
            this.b_queueType = true;
            this.f_queueType = queueType;
            return this;
         }

         public void clearQueueType() {
            copyCheck();
            this.b_queueType = false;
            this.f_queueType = 0;
         }

         // optional int32 partitionId = 5;
         private int f_partitionId = 0;
         private boolean b_partitionId;

         public boolean hasPartitionId() {
            return bean.b_partitionId;
         }

         public int getPartitionId() {
            return bean.f_partitionId;
         }

         public QueueAddBean setPartitionId(int partitionId) {
            copyCheck();
            this.b_partitionId = true;
            this.f_partitionId = partitionId;
            return this;
         }

         public void clearPartitionId() {
            copyCheck();
            this.b_partitionId = false;
            this.f_partitionId = 0;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasQueueName() ) {
               sb.append(prefix+"queueName: ");
               sb.append(getQueueName());
               sb.append("\n");
            }
            if(  hasApplicationType() ) {
               sb.append(prefix+"applicationType: ");
               sb.append(getApplicationType());
               sb.append("\n");
            }
            if(  hasParentName() ) {
               sb.append(prefix+"parentName: ");
               sb.append(getParentName());
               sb.append("\n");
            }
            if(  hasQueueType() ) {
               sb.append(prefix+"queueType: ");
               sb.append(getQueueType());
               sb.append("\n");
            }
            if(  hasPartitionId() ) {
               sb.append(prefix+"partitionId: ");
               sb.append(getPartitionId());
               sb.append("\n");
            }
            return sb;
         }

         public QueueAddBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public QueueAddBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 10:
                  setQueueName(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               case 16:
                  setApplicationType(input.readInt32());
                  break;
               case 26:
                  setParentName(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               case 32:
                  setQueueType(input.readInt32());
                  break;
               case 40:
                  setPartitionId(input.readInt32());
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=QueueAddBean.class )
               return false;
            
            return equals((QueueAddBean)obj);
         }
         
         public boolean equals(QueueAddBean obj) {
            if (hasQueueName() ^ obj.hasQueueName() ) 
               return false;
            if (hasQueueName() && ( !getQueueName().equals(obj.getQueueName()) ))
               return false;
            if (hasApplicationType() ^ obj.hasApplicationType() ) 
               return false;
            if (hasApplicationType() && ( getApplicationType()!=obj.getApplicationType() ))
               return false;
            if (hasParentName() ^ obj.hasParentName() ) 
               return false;
            if (hasParentName() && ( !getParentName().equals(obj.getParentName()) ))
               return false;
            if (hasQueueType() ^ obj.hasQueueType() ) 
               return false;
            if (hasQueueType() && ( getQueueType()!=obj.getQueueType() ))
               return false;
            if (hasPartitionId() ^ obj.hasPartitionId() ) 
               return false;
            if (hasPartitionId() && ( getPartitionId()!=obj.getPartitionId() ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=-1165199936;
            if (hasQueueName()) {
               rc ^= ( 264320796^getQueueName().hashCode() );
            }
            if (hasApplicationType()) {
               rc ^= ( 2050726026^getApplicationType() );
            }
            if (hasParentName()) {
               rc ^= ( 1748594293^getParentName().hashCode() );
            }
            if (hasQueueType()) {
               rc ^= ( 264522699^getQueueType() );
            }
            if (hasPartitionId()) {
               rc ^= ( -1372999291^getPartitionId() );
            }
            return rc;
         }
         
         public QueueAddBean mergeFrom(QueueAdd other) {
            copyCheck();
            if (other.hasQueueName()) {
               setQueueName(other.getQueueName());
            }
            if (other.hasApplicationType()) {
               setApplicationType(other.getApplicationType());
            }
            if (other.hasParentName()) {
               setParentName(other.getParentName());
            }
            if (other.hasQueueType()) {
               setQueueType(other.getQueueType());
            }
            if (other.hasPartitionId()) {
               setPartitionId(other.getPartitionId());
            }
            return this;
         }

         public void clear() {
            clearQueueName();
            clearApplicationType();
            clearParentName();
            clearQueueType();
            clearPartitionId();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_queueName = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_queueName = true;
               } else {
                  f_queueName = null;
                  b_queueName = false;
               }
            }
            f_applicationType = in.readInt();
            b_applicationType = true;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_parentName = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_parentName = true;
               } else {
                  f_parentName = null;
                  b_parentName = false;
               }
            }
            f_queueType = in.readInt();
            b_queueType = true;
            f_partitionId = in.readInt();
            b_partitionId = true;
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_queueName!=null ) {
               out.writeInt(bean.f_queueName.getLength());
               out.write(bean.f_queueName.getData(), bean.f_queueName.getOffset(), bean.f_queueName.getLength());
            } else {
               out.writeInt(-1);
            }
            out.writeInt(bean.f_applicationType);
            if( bean.f_parentName!=null ) {
               out.writeInt(bean.f_parentName.getLength());
               out.write(bean.f_parentName.getData(), bean.f_parentName.getOffset(), bean.f_parentName.getLength());
            } else {
               out.writeInt(-1);
            }
            out.writeInt(bean.f_queueType);
            out.writeInt(bean.f_partitionId);
         }

         public Type toType() {
            return Type.QUEUE_ADD;
         }

      }

      static public final class QueueAddBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<QueueAdd.QueueAddBean, QueueAdd.QueueAddBuffer>, QueueAdd {

         private QueueAddBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private QueueAddBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private QueueAddBuffer(QueueAddBean bean) {
            this.bean = bean;
         }

         public QueueAddBean copy() {
            return bean().copy();
         }

         public QueueAddBuffer freeze() {
            return this;
         }

         private QueueAddBean bean() {
            if (bean == null) {
               try {
                  bean = new QueueAddBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional bytes queueName = 1;
         public boolean hasQueueName() {
            return bean().hasQueueName();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getQueueName() {
            return bean().getQueueName();
         }

         // optional int32 applicationType = 2;
         public boolean hasApplicationType() {
            return bean().hasApplicationType();
         }

         public int getApplicationType() {
            return bean().getApplicationType();
         }

         // optional bytes parentName = 3;
         public boolean hasParentName() {
            return bean().hasParentName();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getParentName() {
            return bean().getParentName();
         }

         // optional int32 queueType = 4;
         public boolean hasQueueType() {
            return bean().hasQueueType();
         }

         public int getQueueType() {
            return bean().getQueueType();
         }

         // optional int32 partitionId = 5;
         public boolean hasPartitionId() {
            return bean().hasPartitionId();
         }

         public int getPartitionId() {
            return bean().getPartitionId();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasQueueName()) {
                  output.writeBytes(1, bean.getQueueName());
               }
               if (bean.hasApplicationType()) {
                  output.writeInt32(2, bean.getApplicationType());
               }
               if (bean.hasParentName()) {
                  output.writeBytes(3, bean.getParentName());
               }
               if (bean.hasQueueType()) {
                  output.writeInt32(4, bean.getQueueType());
               }
               if (bean.hasPartitionId()) {
                  output.writeInt32(5, bean.getPartitionId());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasQueueName()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(1, getQueueName());
            }
            if (hasApplicationType()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(2, getApplicationType());
            }
            if (hasParentName()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(3, getParentName());
            }
            if (hasQueueType()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(4, getQueueType());
            }
            if (hasPartitionId()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(5, getPartitionId());
            }
            return size;
         }

         public static QueueAddBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new QueueAddBean().mergeUnframed(data);
         }

         public static QueueAddBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static QueueAddBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new QueueAddBuffer(data);
         }

         public static QueueAddBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static QueueAddBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            QueueAddBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static QueueAddBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               QueueAddBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static QueueAddBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static QueueAddBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=QueueAddBuffer.class )
               return false;
            
            return equals((QueueAddBuffer)obj);
         }
         
         public boolean equals(QueueAddBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=1244246608 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.QUEUE_ADD;
         }

      }

   }


   static public interface QueueRemove extends org.fusesource.hawtbuf.proto.PBMessage<QueueRemove.QueueRemoveBean, QueueRemove.QueueRemoveBuffer>, Type.TypeCreatable {

      // optional bytes queueName = 1;
      public boolean hasQueueName();
      public org.fusesource.hawtbuf.AsciiBuffer getQueueName();
      public QueueRemoveBean copy();
      public QueueRemoveBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class QueueRemoveBean implements QueueRemove {

         QueueRemoveBuffer frozen;
         QueueRemoveBean bean;

         public QueueRemoveBean() {
            this.bean = this;
         }

         public QueueRemoveBean(QueueRemoveBean copy) {
            this.bean = copy;
         }

         public QueueRemoveBean copy() {
            return new QueueRemoveBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public QueueRemoveBuffer freeze() {
            if( frozen==null ) {
               frozen = new QueueRemoveBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(QueueRemoveBean other) {
            this.bean = this;
            this.f_queueName = other.f_queueName;
            this.b_queueName = other.b_queueName;
         }

         // optional bytes queueName = 1;
         private org.fusesource.hawtbuf.AsciiBuffer f_queueName = null;
         private boolean b_queueName;

         public boolean hasQueueName() {
            return bean.b_queueName;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getQueueName() {
            return bean.f_queueName;
         }

         public QueueRemoveBean setQueueName(org.fusesource.hawtbuf.AsciiBuffer queueName) {
            copyCheck();
            this.b_queueName = true;
            this.f_queueName = queueName;
            return this;
         }

         public void clearQueueName() {
            copyCheck();
            this.b_queueName = false;
            this.f_queueName = null;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasQueueName() ) {
               sb.append(prefix+"queueName: ");
               sb.append(getQueueName());
               sb.append("\n");
            }
            return sb;
         }

         public QueueRemoveBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public QueueRemoveBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 10:
                  setQueueName(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=QueueRemoveBean.class )
               return false;
            
            return equals((QueueRemoveBean)obj);
         }
         
         public boolean equals(QueueRemoveBean obj) {
            if (hasQueueName() ^ obj.hasQueueName() ) 
               return false;
            if (hasQueueName() && ( !getQueueName().equals(obj.getQueueName()) ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=-1121261019;
            if (hasQueueName()) {
               rc ^= ( 264320796^getQueueName().hashCode() );
            }
            return rc;
         }
         
         public QueueRemoveBean mergeFrom(QueueRemove other) {
            copyCheck();
            if (other.hasQueueName()) {
               setQueueName(other.getQueueName());
            }
            return this;
         }

         public void clear() {
            clearQueueName();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_queueName = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_queueName = true;
               } else {
                  f_queueName = null;
                  b_queueName = false;
               }
            }
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_queueName!=null ) {
               out.writeInt(bean.f_queueName.getLength());
               out.write(bean.f_queueName.getData(), bean.f_queueName.getOffset(), bean.f_queueName.getLength());
            } else {
               out.writeInt(-1);
            }
         }

         public Type toType() {
            return Type.QUEUE_REMOVE;
         }

      }

      static public final class QueueRemoveBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<QueueRemove.QueueRemoveBean, QueueRemove.QueueRemoveBuffer>, QueueRemove {

         private QueueRemoveBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private QueueRemoveBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private QueueRemoveBuffer(QueueRemoveBean bean) {
            this.bean = bean;
         }

         public QueueRemoveBean copy() {
            return bean().copy();
         }

         public QueueRemoveBuffer freeze() {
            return this;
         }

         private QueueRemoveBean bean() {
            if (bean == null) {
               try {
                  bean = new QueueRemoveBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional bytes queueName = 1;
         public boolean hasQueueName() {
            return bean().hasQueueName();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getQueueName() {
            return bean().getQueueName();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasQueueName()) {
                  output.writeBytes(1, bean.getQueueName());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasQueueName()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(1, getQueueName());
            }
            return size;
         }

         public static QueueRemoveBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new QueueRemoveBean().mergeUnframed(data);
         }

         public static QueueRemoveBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static QueueRemoveBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new QueueRemoveBuffer(data);
         }

         public static QueueRemoveBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static QueueRemoveBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            QueueRemoveBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static QueueRemoveBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               QueueRemoveBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static QueueRemoveBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static QueueRemoveBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=QueueRemoveBuffer.class )
               return false;
            
            return equals((QueueRemoveBuffer)obj);
         }
         
         public boolean equals(QueueRemoveBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=519872885 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.QUEUE_REMOVE;
         }

      }

   }


   static public interface QueueAddMessage extends org.fusesource.hawtbuf.proto.PBMessage<QueueAddMessage.QueueAddMessageBean, QueueAddMessage.QueueAddMessageBuffer>, Type.TypeCreatable {

      // optional bytes queueName = 1;
      public boolean hasQueueName();
      public org.fusesource.hawtbuf.AsciiBuffer getQueueName();
      // optional int64 queueKey = 2;
      public boolean hasQueueKey();
      public long getQueueKey();
      // optional int64 messageKey = 3;
      public boolean hasMessageKey();
      public long getMessageKey();
      // optional bytes attachment = 4;
      public boolean hasAttachment();
      public org.fusesource.hawtbuf.Buffer getAttachment();
      // optional int32 messageSize = 5;
      public boolean hasMessageSize();
      public int getMessageSize();
      public QueueAddMessageBean copy();
      public QueueAddMessageBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class QueueAddMessageBean implements QueueAddMessage {

         QueueAddMessageBuffer frozen;
         QueueAddMessageBean bean;

         public QueueAddMessageBean() {
            this.bean = this;
         }

         public QueueAddMessageBean(QueueAddMessageBean copy) {
            this.bean = copy;
         }

         public QueueAddMessageBean copy() {
            return new QueueAddMessageBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public QueueAddMessageBuffer freeze() {
            if( frozen==null ) {
               frozen = new QueueAddMessageBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(QueueAddMessageBean other) {
            this.bean = this;
            this.f_queueName = other.f_queueName;
            this.b_queueName = other.b_queueName;
            this.f_queueKey = other.f_queueKey;
            this.b_queueKey = other.b_queueKey;
            this.f_messageKey = other.f_messageKey;
            this.b_messageKey = other.b_messageKey;
            this.f_attachment = other.f_attachment;
            this.b_attachment = other.b_attachment;
            this.f_messageSize = other.f_messageSize;
            this.b_messageSize = other.b_messageSize;
         }

         // optional bytes queueName = 1;
         private org.fusesource.hawtbuf.AsciiBuffer f_queueName = null;
         private boolean b_queueName;

         public boolean hasQueueName() {
            return bean.b_queueName;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getQueueName() {
            return bean.f_queueName;
         }

         public QueueAddMessageBean setQueueName(org.fusesource.hawtbuf.AsciiBuffer queueName) {
            copyCheck();
            this.b_queueName = true;
            this.f_queueName = queueName;
            return this;
         }

         public void clearQueueName() {
            copyCheck();
            this.b_queueName = false;
            this.f_queueName = null;
         }

         // optional int64 queueKey = 2;
         private long f_queueKey = 0;
         private boolean b_queueKey;

         public boolean hasQueueKey() {
            return bean.b_queueKey;
         }

         public long getQueueKey() {
            return bean.f_queueKey;
         }

         public QueueAddMessageBean setQueueKey(long queueKey) {
            copyCheck();
            this.b_queueKey = true;
            this.f_queueKey = queueKey;
            return this;
         }

         public void clearQueueKey() {
            copyCheck();
            this.b_queueKey = false;
            this.f_queueKey = 0;
         }

         // optional int64 messageKey = 3;
         private long f_messageKey = 0;
         private boolean b_messageKey;

         public boolean hasMessageKey() {
            return bean.b_messageKey;
         }

         public long getMessageKey() {
            return bean.f_messageKey;
         }

         public QueueAddMessageBean setMessageKey(long messageKey) {
            copyCheck();
            this.b_messageKey = true;
            this.f_messageKey = messageKey;
            return this;
         }

         public void clearMessageKey() {
            copyCheck();
            this.b_messageKey = false;
            this.f_messageKey = 0;
         }

         // optional bytes attachment = 4;
         private org.fusesource.hawtbuf.Buffer f_attachment = null;
         private boolean b_attachment;

         public boolean hasAttachment() {
            return bean.b_attachment;
         }

         public org.fusesource.hawtbuf.Buffer getAttachment() {
            return bean.f_attachment;
         }

         public QueueAddMessageBean setAttachment(org.fusesource.hawtbuf.Buffer attachment) {
            copyCheck();
            this.b_attachment = true;
            this.f_attachment = attachment;
            return this;
         }

         public void clearAttachment() {
            copyCheck();
            this.b_attachment = false;
            this.f_attachment = null;
         }

         // optional int32 messageSize = 5;
         private int f_messageSize = 0;
         private boolean b_messageSize;

         public boolean hasMessageSize() {
            return bean.b_messageSize;
         }

         public int getMessageSize() {
            return bean.f_messageSize;
         }

         public QueueAddMessageBean setMessageSize(int messageSize) {
            copyCheck();
            this.b_messageSize = true;
            this.f_messageSize = messageSize;
            return this;
         }

         public void clearMessageSize() {
            copyCheck();
            this.b_messageSize = false;
            this.f_messageSize = 0;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasQueueName() ) {
               sb.append(prefix+"queueName: ");
               sb.append(getQueueName());
               sb.append("\n");
            }
            if(  hasQueueKey() ) {
               sb.append(prefix+"queueKey: ");
               sb.append(getQueueKey());
               sb.append("\n");
            }
            if(  hasMessageKey() ) {
               sb.append(prefix+"messageKey: ");
               sb.append(getMessageKey());
               sb.append("\n");
            }
            if(  hasAttachment() ) {
               sb.append(prefix+"attachment: ");
               sb.append(getAttachment());
               sb.append("\n");
            }
            if(  hasMessageSize() ) {
               sb.append(prefix+"messageSize: ");
               sb.append(getMessageSize());
               sb.append("\n");
            }
            return sb;
         }

         public QueueAddMessageBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public QueueAddMessageBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 10:
                  setQueueName(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               case 16:
                  setQueueKey(input.readInt64());
                  break;
               case 24:
                  setMessageKey(input.readInt64());
                  break;
               case 34:
                  setAttachment(input.readBytes());
                  break;
               case 40:
                  setMessageSize(input.readInt32());
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=QueueAddMessageBean.class )
               return false;
            
            return equals((QueueAddMessageBean)obj);
         }
         
         public boolean equals(QueueAddMessageBean obj) {
            if (hasQueueName() ^ obj.hasQueueName() ) 
               return false;
            if (hasQueueName() && ( !getQueueName().equals(obj.getQueueName()) ))
               return false;
            if (hasQueueKey() ^ obj.hasQueueKey() ) 
               return false;
            if (hasQueueKey() && ( getQueueKey()!=obj.getQueueKey() ))
               return false;
            if (hasMessageKey() ^ obj.hasMessageKey() ) 
               return false;
            if (hasMessageKey() && ( getMessageKey()!=obj.getMessageKey() ))
               return false;
            if (hasAttachment() ^ obj.hasAttachment() ) 
               return false;
            if (hasAttachment() && ( !getAttachment().equals(obj.getAttachment()) ))
               return false;
            if (hasMessageSize() ^ obj.hasMessageSize() ) 
               return false;
            if (hasMessageSize() && ( getMessageSize()!=obj.getMessageSize() ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=-49326009;
            if (hasQueueName()) {
               rc ^= ( 264320796^getQueueName().hashCode() );
            }
            if (hasQueueKey()) {
               rc ^= ( -1099854930^(new Long(getQueueKey())).hashCode() );
            }
            if (hasMessageKey()) {
               rc ^= ( 302723320^(new Long(getMessageKey())).hashCode() );
            }
            if (hasAttachment()) {
               rc ^= ( 29963587^getAttachment().hashCode() );
            }
            if (hasMessageSize()) {
               rc ^= ( 794730632^getMessageSize() );
            }
            return rc;
         }
         
         public QueueAddMessageBean mergeFrom(QueueAddMessage other) {
            copyCheck();
            if (other.hasQueueName()) {
               setQueueName(other.getQueueName());
            }
            if (other.hasQueueKey()) {
               setQueueKey(other.getQueueKey());
            }
            if (other.hasMessageKey()) {
               setMessageKey(other.getMessageKey());
            }
            if (other.hasAttachment()) {
               setAttachment(other.getAttachment());
            }
            if (other.hasMessageSize()) {
               setMessageSize(other.getMessageSize());
            }
            return this;
         }

         public void clear() {
            clearQueueName();
            clearQueueKey();
            clearMessageKey();
            clearAttachment();
            clearMessageSize();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_queueName = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_queueName = true;
               } else {
                  f_queueName = null;
                  b_queueName = false;
               }
            }
            f_queueKey = in.readLong();
            b_queueKey = true;
            f_messageKey = in.readLong();
            b_messageKey = true;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_attachment = new org.fusesource.hawtbuf.Buffer(b);
                  b_attachment = true;
               } else {
                  f_attachment = null;
                  b_attachment = false;
               }
            }
            f_messageSize = in.readInt();
            b_messageSize = true;
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_queueName!=null ) {
               out.writeInt(bean.f_queueName.getLength());
               out.write(bean.f_queueName.getData(), bean.f_queueName.getOffset(), bean.f_queueName.getLength());
            } else {
               out.writeInt(-1);
            }
            out.writeLong(bean.f_queueKey);
            out.writeLong(bean.f_messageKey);
            if( bean.f_attachment!=null ) {
               out.writeInt(bean.f_attachment.getLength());
               out.write(bean.f_attachment.getData(), bean.f_attachment.getOffset(), bean.f_attachment.getLength());
            } else {
               out.writeInt(-1);
            }
            out.writeInt(bean.f_messageSize);
         }

         public Type toType() {
            return Type.QUEUE_ADD_MESSAGE;
         }

      }

      static public final class QueueAddMessageBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<QueueAddMessage.QueueAddMessageBean, QueueAddMessage.QueueAddMessageBuffer>, QueueAddMessage {

         private QueueAddMessageBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private QueueAddMessageBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private QueueAddMessageBuffer(QueueAddMessageBean bean) {
            this.bean = bean;
         }

         public QueueAddMessageBean copy() {
            return bean().copy();
         }

         public QueueAddMessageBuffer freeze() {
            return this;
         }

         private QueueAddMessageBean bean() {
            if (bean == null) {
               try {
                  bean = new QueueAddMessageBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional bytes queueName = 1;
         public boolean hasQueueName() {
            return bean().hasQueueName();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getQueueName() {
            return bean().getQueueName();
         }

         // optional int64 queueKey = 2;
         public boolean hasQueueKey() {
            return bean().hasQueueKey();
         }

         public long getQueueKey() {
            return bean().getQueueKey();
         }

         // optional int64 messageKey = 3;
         public boolean hasMessageKey() {
            return bean().hasMessageKey();
         }

         public long getMessageKey() {
            return bean().getMessageKey();
         }

         // optional bytes attachment = 4;
         public boolean hasAttachment() {
            return bean().hasAttachment();
         }

         public org.fusesource.hawtbuf.Buffer getAttachment() {
            return bean().getAttachment();
         }

         // optional int32 messageSize = 5;
         public boolean hasMessageSize() {
            return bean().hasMessageSize();
         }

         public int getMessageSize() {
            return bean().getMessageSize();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasQueueName()) {
                  output.writeBytes(1, bean.getQueueName());
               }
               if (bean.hasQueueKey()) {
                  output.writeInt64(2, bean.getQueueKey());
               }
               if (bean.hasMessageKey()) {
                  output.writeInt64(3, bean.getMessageKey());
               }
               if (bean.hasAttachment()) {
                  output.writeBytes(4, bean.getAttachment());
               }
               if (bean.hasMessageSize()) {
                  output.writeInt32(5, bean.getMessageSize());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasQueueName()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(1, getQueueName());
            }
            if (hasQueueKey()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(2, getQueueKey());
            }
            if (hasMessageKey()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(3, getMessageKey());
            }
            if (hasAttachment()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(4, getAttachment());
            }
            if (hasMessageSize()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(5, getMessageSize());
            }
            return size;
         }

         public static QueueAddMessageBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new QueueAddMessageBean().mergeUnframed(data);
         }

         public static QueueAddMessageBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static QueueAddMessageBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new QueueAddMessageBuffer(data);
         }

         public static QueueAddMessageBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static QueueAddMessageBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            QueueAddMessageBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static QueueAddMessageBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               QueueAddMessageBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static QueueAddMessageBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static QueueAddMessageBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=QueueAddMessageBuffer.class )
               return false;
            
            return equals((QueueAddMessageBuffer)obj);
         }
         
         public boolean equals(QueueAddMessageBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=-142733545 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.QUEUE_ADD_MESSAGE;
         }

      }

   }


   static public interface QueueRemoveMessage extends org.fusesource.hawtbuf.proto.PBMessage<QueueRemoveMessage.QueueRemoveMessageBean, QueueRemoveMessage.QueueRemoveMessageBuffer>, Type.TypeCreatable {

      // optional bytes queueName = 1;
      public boolean hasQueueName();
      public org.fusesource.hawtbuf.AsciiBuffer getQueueName();
      // optional int64 queueKey = 2;
      public boolean hasQueueKey();
      public long getQueueKey();
      public QueueRemoveMessageBean copy();
      public QueueRemoveMessageBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class QueueRemoveMessageBean implements QueueRemoveMessage {

         QueueRemoveMessageBuffer frozen;
         QueueRemoveMessageBean bean;

         public QueueRemoveMessageBean() {
            this.bean = this;
         }

         public QueueRemoveMessageBean(QueueRemoveMessageBean copy) {
            this.bean = copy;
         }

         public QueueRemoveMessageBean copy() {
            return new QueueRemoveMessageBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public QueueRemoveMessageBuffer freeze() {
            if( frozen==null ) {
               frozen = new QueueRemoveMessageBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(QueueRemoveMessageBean other) {
            this.bean = this;
            this.f_queueName = other.f_queueName;
            this.b_queueName = other.b_queueName;
            this.f_queueKey = other.f_queueKey;
            this.b_queueKey = other.b_queueKey;
         }

         // optional bytes queueName = 1;
         private org.fusesource.hawtbuf.AsciiBuffer f_queueName = null;
         private boolean b_queueName;

         public boolean hasQueueName() {
            return bean.b_queueName;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getQueueName() {
            return bean.f_queueName;
         }

         public QueueRemoveMessageBean setQueueName(org.fusesource.hawtbuf.AsciiBuffer queueName) {
            copyCheck();
            this.b_queueName = true;
            this.f_queueName = queueName;
            return this;
         }

         public void clearQueueName() {
            copyCheck();
            this.b_queueName = false;
            this.f_queueName = null;
         }

         // optional int64 queueKey = 2;
         private long f_queueKey = 0;
         private boolean b_queueKey;

         public boolean hasQueueKey() {
            return bean.b_queueKey;
         }

         public long getQueueKey() {
            return bean.f_queueKey;
         }

         public QueueRemoveMessageBean setQueueKey(long queueKey) {
            copyCheck();
            this.b_queueKey = true;
            this.f_queueKey = queueKey;
            return this;
         }

         public void clearQueueKey() {
            copyCheck();
            this.b_queueKey = false;
            this.f_queueKey = 0;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasQueueName() ) {
               sb.append(prefix+"queueName: ");
               sb.append(getQueueName());
               sb.append("\n");
            }
            if(  hasQueueKey() ) {
               sb.append(prefix+"queueKey: ");
               sb.append(getQueueKey());
               sb.append("\n");
            }
            return sb;
         }

         public QueueRemoveMessageBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public QueueRemoveMessageBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 10:
                  setQueueName(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               case 16:
                  setQueueKey(input.readInt64());
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=QueueRemoveMessageBean.class )
               return false;
            
            return equals((QueueRemoveMessageBean)obj);
         }
         
         public boolean equals(QueueRemoveMessageBean obj) {
            if (hasQueueName() ^ obj.hasQueueName() ) 
               return false;
            if (hasQueueName() && ( !getQueueName().equals(obj.getQueueName()) ))
               return false;
            if (hasQueueKey() ^ obj.hasQueueKey() ) 
               return false;
            if (hasQueueKey() && ( getQueueKey()!=obj.getQueueKey() ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=1893537858;
            if (hasQueueName()) {
               rc ^= ( 264320796^getQueueName().hashCode() );
            }
            if (hasQueueKey()) {
               rc ^= ( -1099854930^(new Long(getQueueKey())).hashCode() );
            }
            return rc;
         }
         
         public QueueRemoveMessageBean mergeFrom(QueueRemoveMessage other) {
            copyCheck();
            if (other.hasQueueName()) {
               setQueueName(other.getQueueName());
            }
            if (other.hasQueueKey()) {
               setQueueKey(other.getQueueKey());
            }
            return this;
         }

         public void clear() {
            clearQueueName();
            clearQueueKey();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_queueName = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_queueName = true;
               } else {
                  f_queueName = null;
                  b_queueName = false;
               }
            }
            f_queueKey = in.readLong();
            b_queueKey = true;
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_queueName!=null ) {
               out.writeInt(bean.f_queueName.getLength());
               out.write(bean.f_queueName.getData(), bean.f_queueName.getOffset(), bean.f_queueName.getLength());
            } else {
               out.writeInt(-1);
            }
            out.writeLong(bean.f_queueKey);
         }

         public Type toType() {
            return Type.QUEUE_REMOVE_MESSAGE;
         }

      }

      static public final class QueueRemoveMessageBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<QueueRemoveMessage.QueueRemoveMessageBean, QueueRemoveMessage.QueueRemoveMessageBuffer>, QueueRemoveMessage {

         private QueueRemoveMessageBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private QueueRemoveMessageBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private QueueRemoveMessageBuffer(QueueRemoveMessageBean bean) {
            this.bean = bean;
         }

         public QueueRemoveMessageBean copy() {
            return bean().copy();
         }

         public QueueRemoveMessageBuffer freeze() {
            return this;
         }

         private QueueRemoveMessageBean bean() {
            if (bean == null) {
               try {
                  bean = new QueueRemoveMessageBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional bytes queueName = 1;
         public boolean hasQueueName() {
            return bean().hasQueueName();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getQueueName() {
            return bean().getQueueName();
         }

         // optional int64 queueKey = 2;
         public boolean hasQueueKey() {
            return bean().hasQueueKey();
         }

         public long getQueueKey() {
            return bean().getQueueKey();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasQueueName()) {
                  output.writeBytes(1, bean.getQueueName());
               }
               if (bean.hasQueueKey()) {
                  output.writeInt64(2, bean.getQueueKey());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasQueueName()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(1, getQueueName());
            }
            if (hasQueueKey()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(2, getQueueKey());
            }
            return size;
         }

         public static QueueRemoveMessageBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new QueueRemoveMessageBean().mergeUnframed(data);
         }

         public static QueueRemoveMessageBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static QueueRemoveMessageBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new QueueRemoveMessageBuffer(data);
         }

         public static QueueRemoveMessageBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static QueueRemoveMessageBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            QueueRemoveMessageBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static QueueRemoveMessageBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               QueueRemoveMessageBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static QueueRemoveMessageBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static QueueRemoveMessageBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=QueueRemoveMessageBuffer.class )
               return false;
            
            return equals((QueueRemoveMessageBuffer)obj);
         }
         
         public boolean equals(QueueRemoveMessageBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=-1361331118 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.QUEUE_REMOVE_MESSAGE;
         }

      }

   }


   static public interface SubscriptionAdd extends org.fusesource.hawtbuf.proto.PBMessage<SubscriptionAdd.SubscriptionAddBean, SubscriptionAdd.SubscriptionAddBuffer>, Type.TypeCreatable {

      // optional bytes name = 1;
      public boolean hasName();
      public org.fusesource.hawtbuf.AsciiBuffer getName();
      // optional bytes selector = 2;
      public boolean hasSelector();
      public org.fusesource.hawtbuf.AsciiBuffer getSelector();
      // optional bytes destination = 3;
      public boolean hasDestination();
      public org.fusesource.hawtbuf.AsciiBuffer getDestination();
      // optional bool durable = 4;
      public boolean hasDurable();
      public boolean getDurable();
      // optional int64 tte = 5;
      public boolean hasTte();
      public long getTte();
      // optional bytes attachment = 6;
      public boolean hasAttachment();
      public org.fusesource.hawtbuf.Buffer getAttachment();
      public SubscriptionAddBean copy();
      public SubscriptionAddBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class SubscriptionAddBean implements SubscriptionAdd {

         SubscriptionAddBuffer frozen;
         SubscriptionAddBean bean;

         public SubscriptionAddBean() {
            this.bean = this;
         }

         public SubscriptionAddBean(SubscriptionAddBean copy) {
            this.bean = copy;
         }

         public SubscriptionAddBean copy() {
            return new SubscriptionAddBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public SubscriptionAddBuffer freeze() {
            if( frozen==null ) {
               frozen = new SubscriptionAddBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(SubscriptionAddBean other) {
            this.bean = this;
            this.f_name = other.f_name;
            this.b_name = other.b_name;
            this.f_selector = other.f_selector;
            this.b_selector = other.b_selector;
            this.f_destination = other.f_destination;
            this.b_destination = other.b_destination;
            this.f_durable = other.f_durable;
            this.b_durable = other.b_durable;
            this.f_tte = other.f_tte;
            this.b_tte = other.b_tte;
            this.f_attachment = other.f_attachment;
            this.b_attachment = other.b_attachment;
         }

         // optional bytes name = 1;
         private org.fusesource.hawtbuf.AsciiBuffer f_name = null;
         private boolean b_name;

         public boolean hasName() {
            return bean.b_name;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getName() {
            return bean.f_name;
         }

         public SubscriptionAddBean setName(org.fusesource.hawtbuf.AsciiBuffer name) {
            copyCheck();
            this.b_name = true;
            this.f_name = name;
            return this;
         }

         public void clearName() {
            copyCheck();
            this.b_name = false;
            this.f_name = null;
         }

         // optional bytes selector = 2;
         private org.fusesource.hawtbuf.AsciiBuffer f_selector = null;
         private boolean b_selector;

         public boolean hasSelector() {
            return bean.b_selector;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getSelector() {
            return bean.f_selector;
         }

         public SubscriptionAddBean setSelector(org.fusesource.hawtbuf.AsciiBuffer selector) {
            copyCheck();
            this.b_selector = true;
            this.f_selector = selector;
            return this;
         }

         public void clearSelector() {
            copyCheck();
            this.b_selector = false;
            this.f_selector = null;
         }

         // optional bytes destination = 3;
         private org.fusesource.hawtbuf.AsciiBuffer f_destination = null;
         private boolean b_destination;

         public boolean hasDestination() {
            return bean.b_destination;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getDestination() {
            return bean.f_destination;
         }

         public SubscriptionAddBean setDestination(org.fusesource.hawtbuf.AsciiBuffer destination) {
            copyCheck();
            this.b_destination = true;
            this.f_destination = destination;
            return this;
         }

         public void clearDestination() {
            copyCheck();
            this.b_destination = false;
            this.f_destination = null;
         }

         // optional bool durable = 4;
         private boolean f_durable = false;
         private boolean b_durable;

         public boolean hasDurable() {
            return bean.b_durable;
         }

         public boolean getDurable() {
            return bean.f_durable;
         }

         public SubscriptionAddBean setDurable(boolean durable) {
            copyCheck();
            this.b_durable = true;
            this.f_durable = durable;
            return this;
         }

         public void clearDurable() {
            copyCheck();
            this.b_durable = false;
            this.f_durable = false;
         }

         // optional int64 tte = 5;
         private long f_tte = -1l;
         private boolean b_tte;

         public boolean hasTte() {
            return bean.b_tte;
         }

         public long getTte() {
            return bean.f_tte;
         }

         public SubscriptionAddBean setTte(long tte) {
            copyCheck();
            this.b_tte = true;
            this.f_tte = tte;
            return this;
         }

         public void clearTte() {
            copyCheck();
            this.b_tte = false;
            this.f_tte = -1l;
         }

         // optional bytes attachment = 6;
         private org.fusesource.hawtbuf.Buffer f_attachment = null;
         private boolean b_attachment;

         public boolean hasAttachment() {
            return bean.b_attachment;
         }

         public org.fusesource.hawtbuf.Buffer getAttachment() {
            return bean.f_attachment;
         }

         public SubscriptionAddBean setAttachment(org.fusesource.hawtbuf.Buffer attachment) {
            copyCheck();
            this.b_attachment = true;
            this.f_attachment = attachment;
            return this;
         }

         public void clearAttachment() {
            copyCheck();
            this.b_attachment = false;
            this.f_attachment = null;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasName() ) {
               sb.append(prefix+"name: ");
               sb.append(getName());
               sb.append("\n");
            }
            if(  hasSelector() ) {
               sb.append(prefix+"selector: ");
               sb.append(getSelector());
               sb.append("\n");
            }
            if(  hasDestination() ) {
               sb.append(prefix+"destination: ");
               sb.append(getDestination());
               sb.append("\n");
            }
            if(  hasDurable() ) {
               sb.append(prefix+"durable: ");
               sb.append(getDurable());
               sb.append("\n");
            }
            if(  hasTte() ) {
               sb.append(prefix+"tte: ");
               sb.append(getTte());
               sb.append("\n");
            }
            if(  hasAttachment() ) {
               sb.append(prefix+"attachment: ");
               sb.append(getAttachment());
               sb.append("\n");
            }
            return sb;
         }

         public SubscriptionAddBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public SubscriptionAddBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 10:
                  setName(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               case 18:
                  setSelector(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               case 26:
                  setDestination(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               case 32:
                  setDurable(input.readBool());
                  break;
               case 40:
                  setTte(input.readInt64());
                  break;
               case 50:
                  setAttachment(input.readBytes());
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=SubscriptionAddBean.class )
               return false;
            
            return equals((SubscriptionAddBean)obj);
         }
         
         public boolean equals(SubscriptionAddBean obj) {
            if (hasName() ^ obj.hasName() ) 
               return false;
            if (hasName() && ( !getName().equals(obj.getName()) ))
               return false;
            if (hasSelector() ^ obj.hasSelector() ) 
               return false;
            if (hasSelector() && ( !getSelector().equals(obj.getSelector()) ))
               return false;
            if (hasDestination() ^ obj.hasDestination() ) 
               return false;
            if (hasDestination() && ( !getDestination().equals(obj.getDestination()) ))
               return false;
            if (hasDurable() ^ obj.hasDurable() ) 
               return false;
            if (hasDurable() && ( getDurable()!=obj.getDurable() ))
               return false;
            if (hasTte() ^ obj.hasTte() ) 
               return false;
            if (hasTte() && ( getTte()!=obj.getTte() ))
               return false;
            if (hasAttachment() ^ obj.hasAttachment() ) 
               return false;
            if (hasAttachment() && ( !getAttachment().equals(obj.getAttachment()) ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=-176962572;
            if (hasName()) {
               rc ^= ( 2420395^getName().hashCode() );
            }
            if (hasSelector()) {
               rc ^= ( 1256216575^getSelector().hashCode() );
            }
            if (hasDestination()) {
               rc ^= ( 238021614^getDestination().hashCode() );
            }
            if (hasDurable()) {
               rc ^= ( -616379717^ (getDurable()? 4:-4) );
            }
            if (hasTte()) {
               rc ^= ( 84421^(new Long(getTte())).hashCode() );
            }
            if (hasAttachment()) {
               rc ^= ( 29963587^getAttachment().hashCode() );
            }
            return rc;
         }
         
         public SubscriptionAddBean mergeFrom(SubscriptionAdd other) {
            copyCheck();
            if (other.hasName()) {
               setName(other.getName());
            }
            if (other.hasSelector()) {
               setSelector(other.getSelector());
            }
            if (other.hasDestination()) {
               setDestination(other.getDestination());
            }
            if (other.hasDurable()) {
               setDurable(other.getDurable());
            }
            if (other.hasTte()) {
               setTte(other.getTte());
            }
            if (other.hasAttachment()) {
               setAttachment(other.getAttachment());
            }
            return this;
         }

         public void clear() {
            clearName();
            clearSelector();
            clearDestination();
            clearDurable();
            clearTte();
            clearAttachment();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_name = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_name = true;
               } else {
                  f_name = null;
                  b_name = false;
               }
            }
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_selector = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_selector = true;
               } else {
                  f_selector = null;
                  b_selector = false;
               }
            }
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_destination = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_destination = true;
               } else {
                  f_destination = null;
                  b_destination = false;
               }
            }
            f_durable = in.readBoolean();
            b_durable = true;
            f_tte = in.readLong();
            b_tte = true;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_attachment = new org.fusesource.hawtbuf.Buffer(b);
                  b_attachment = true;
               } else {
                  f_attachment = null;
                  b_attachment = false;
               }
            }
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_name!=null ) {
               out.writeInt(bean.f_name.getLength());
               out.write(bean.f_name.getData(), bean.f_name.getOffset(), bean.f_name.getLength());
            } else {
               out.writeInt(-1);
            }
            if( bean.f_selector!=null ) {
               out.writeInt(bean.f_selector.getLength());
               out.write(bean.f_selector.getData(), bean.f_selector.getOffset(), bean.f_selector.getLength());
            } else {
               out.writeInt(-1);
            }
            if( bean.f_destination!=null ) {
               out.writeInt(bean.f_destination.getLength());
               out.write(bean.f_destination.getData(), bean.f_destination.getOffset(), bean.f_destination.getLength());
            } else {
               out.writeInt(-1);
            }
            out.writeBoolean(bean.f_durable);
            out.writeLong(bean.f_tte);
            if( bean.f_attachment!=null ) {
               out.writeInt(bean.f_attachment.getLength());
               out.write(bean.f_attachment.getData(), bean.f_attachment.getOffset(), bean.f_attachment.getLength());
            } else {
               out.writeInt(-1);
            }
         }

         public Type toType() {
            return Type.SUBSCRIPTION_ADD;
         }

      }

      static public final class SubscriptionAddBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<SubscriptionAdd.SubscriptionAddBean, SubscriptionAdd.SubscriptionAddBuffer>, SubscriptionAdd {

         private SubscriptionAddBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private SubscriptionAddBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private SubscriptionAddBuffer(SubscriptionAddBean bean) {
            this.bean = bean;
         }

         public SubscriptionAddBean copy() {
            return bean().copy();
         }

         public SubscriptionAddBuffer freeze() {
            return this;
         }

         private SubscriptionAddBean bean() {
            if (bean == null) {
               try {
                  bean = new SubscriptionAddBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional bytes name = 1;
         public boolean hasName() {
            return bean().hasName();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getName() {
            return bean().getName();
         }

         // optional bytes selector = 2;
         public boolean hasSelector() {
            return bean().hasSelector();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getSelector() {
            return bean().getSelector();
         }

         // optional bytes destination = 3;
         public boolean hasDestination() {
            return bean().hasDestination();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getDestination() {
            return bean().getDestination();
         }

         // optional bool durable = 4;
         public boolean hasDurable() {
            return bean().hasDurable();
         }

         public boolean getDurable() {
            return bean().getDurable();
         }

         // optional int64 tte = 5;
         public boolean hasTte() {
            return bean().hasTte();
         }

         public long getTte() {
            return bean().getTte();
         }

         // optional bytes attachment = 6;
         public boolean hasAttachment() {
            return bean().hasAttachment();
         }

         public org.fusesource.hawtbuf.Buffer getAttachment() {
            return bean().getAttachment();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasName()) {
                  output.writeBytes(1, bean.getName());
               }
               if (bean.hasSelector()) {
                  output.writeBytes(2, bean.getSelector());
               }
               if (bean.hasDestination()) {
                  output.writeBytes(3, bean.getDestination());
               }
               if (bean.hasDurable()) {
                  output.writeBool(4, bean.getDurable());
               }
               if (bean.hasTte()) {
                  output.writeInt64(5, bean.getTte());
               }
               if (bean.hasAttachment()) {
                  output.writeBytes(6, bean.getAttachment());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasName()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(1, getName());
            }
            if (hasSelector()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(2, getSelector());
            }
            if (hasDestination()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(3, getDestination());
            }
            if (hasDurable()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBoolSize(4, getDurable());
            }
            if (hasTte()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(5, getTte());
            }
            if (hasAttachment()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(6, getAttachment());
            }
            return size;
         }

         public static SubscriptionAddBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new SubscriptionAddBean().mergeUnframed(data);
         }

         public static SubscriptionAddBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static SubscriptionAddBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new SubscriptionAddBuffer(data);
         }

         public static SubscriptionAddBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static SubscriptionAddBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            SubscriptionAddBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static SubscriptionAddBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               SubscriptionAddBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static SubscriptionAddBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static SubscriptionAddBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=SubscriptionAddBuffer.class )
               return false;
            
            return equals((SubscriptionAddBuffer)obj);
         }
         
         public boolean equals(SubscriptionAddBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=1752580996 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.SUBSCRIPTION_ADD;
         }

      }

   }


   static public interface SubscriptionRemove extends org.fusesource.hawtbuf.proto.PBMessage<SubscriptionRemove.SubscriptionRemoveBean, SubscriptionRemove.SubscriptionRemoveBuffer>, Type.TypeCreatable {

      // optional bytes name = 1;
      public boolean hasName();
      public org.fusesource.hawtbuf.AsciiBuffer getName();
      public SubscriptionRemoveBean copy();
      public SubscriptionRemoveBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class SubscriptionRemoveBean implements SubscriptionRemove {

         SubscriptionRemoveBuffer frozen;
         SubscriptionRemoveBean bean;

         public SubscriptionRemoveBean() {
            this.bean = this;
         }

         public SubscriptionRemoveBean(SubscriptionRemoveBean copy) {
            this.bean = copy;
         }

         public SubscriptionRemoveBean copy() {
            return new SubscriptionRemoveBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public SubscriptionRemoveBuffer freeze() {
            if( frozen==null ) {
               frozen = new SubscriptionRemoveBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(SubscriptionRemoveBean other) {
            this.bean = this;
            this.f_name = other.f_name;
            this.b_name = other.b_name;
         }

         // optional bytes name = 1;
         private org.fusesource.hawtbuf.AsciiBuffer f_name = null;
         private boolean b_name;

         public boolean hasName() {
            return bean.b_name;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getName() {
            return bean.f_name;
         }

         public SubscriptionRemoveBean setName(org.fusesource.hawtbuf.AsciiBuffer name) {
            copyCheck();
            this.b_name = true;
            this.f_name = name;
            return this;
         }

         public void clearName() {
            copyCheck();
            this.b_name = false;
            this.f_name = null;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasName() ) {
               sb.append(prefix+"name: ");
               sb.append(getName());
               sb.append("\n");
            }
            return sb;
         }

         public SubscriptionRemoveBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public SubscriptionRemoveBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 10:
                  setName(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=SubscriptionRemoveBean.class )
               return false;
            
            return equals((SubscriptionRemoveBean)obj);
         }
         
         public boolean equals(SubscriptionRemoveBean obj) {
            if (hasName() ^ obj.hasName() ) 
               return false;
            if (hasName() && ( !getName().equals(obj.getName()) ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=1752203121;
            if (hasName()) {
               rc ^= ( 2420395^getName().hashCode() );
            }
            return rc;
         }
         
         public SubscriptionRemoveBean mergeFrom(SubscriptionRemove other) {
            copyCheck();
            if (other.hasName()) {
               setName(other.getName());
            }
            return this;
         }

         public void clear() {
            clearName();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_name = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_name = true;
               } else {
                  f_name = null;
                  b_name = false;
               }
            }
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_name!=null ) {
               out.writeInt(bean.f_name.getLength());
               out.write(bean.f_name.getData(), bean.f_name.getOffset(), bean.f_name.getLength());
            } else {
               out.writeInt(-1);
            }
         }

         public Type toType() {
            return Type.SUBSCRIPTION_REMOVE;
         }

      }

      static public final class SubscriptionRemoveBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<SubscriptionRemove.SubscriptionRemoveBean, SubscriptionRemove.SubscriptionRemoveBuffer>, SubscriptionRemove {

         private SubscriptionRemoveBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private SubscriptionRemoveBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private SubscriptionRemoveBuffer(SubscriptionRemoveBean bean) {
            this.bean = bean;
         }

         public SubscriptionRemoveBean copy() {
            return bean().copy();
         }

         public SubscriptionRemoveBuffer freeze() {
            return this;
         }

         private SubscriptionRemoveBean bean() {
            if (bean == null) {
               try {
                  bean = new SubscriptionRemoveBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional bytes name = 1;
         public boolean hasName() {
            return bean().hasName();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getName() {
            return bean().getName();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasName()) {
                  output.writeBytes(1, bean.getName());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasName()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(1, getName());
            }
            return size;
         }

         public static SubscriptionRemoveBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new SubscriptionRemoveBean().mergeUnframed(data);
         }

         public static SubscriptionRemoveBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static SubscriptionRemoveBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new SubscriptionRemoveBuffer(data);
         }

         public static SubscriptionRemoveBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static SubscriptionRemoveBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            SubscriptionRemoveBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static SubscriptionRemoveBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               SubscriptionRemoveBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static SubscriptionRemoveBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static SubscriptionRemoveBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=SubscriptionRemoveBuffer.class )
               return false;
            
            return equals((SubscriptionRemoveBuffer)obj);
         }
         
         public boolean equals(SubscriptionRemoveBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=254940097 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.SUBSCRIPTION_REMOVE;
         }

      }

   }


   static public interface MapAdd extends org.fusesource.hawtbuf.proto.PBMessage<MapAdd.MapAddBean, MapAdd.MapAddBuffer>, Type.TypeCreatable {

      // optional bytes mapName = 1;
      public boolean hasMapName();
      public org.fusesource.hawtbuf.AsciiBuffer getMapName();
      public MapAddBean copy();
      public MapAddBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class MapAddBean implements MapAdd {

         MapAddBuffer frozen;
         MapAddBean bean;

         public MapAddBean() {
            this.bean = this;
         }

         public MapAddBean(MapAddBean copy) {
            this.bean = copy;
         }

         public MapAddBean copy() {
            return new MapAddBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public MapAddBuffer freeze() {
            if( frozen==null ) {
               frozen = new MapAddBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(MapAddBean other) {
            this.bean = this;
            this.f_mapName = other.f_mapName;
            this.b_mapName = other.b_mapName;
         }

         // optional bytes mapName = 1;
         private org.fusesource.hawtbuf.AsciiBuffer f_mapName = null;
         private boolean b_mapName;

         public boolean hasMapName() {
            return bean.b_mapName;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getMapName() {
            return bean.f_mapName;
         }

         public MapAddBean setMapName(org.fusesource.hawtbuf.AsciiBuffer mapName) {
            copyCheck();
            this.b_mapName = true;
            this.f_mapName = mapName;
            return this;
         }

         public void clearMapName() {
            copyCheck();
            this.b_mapName = false;
            this.f_mapName = null;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasMapName() ) {
               sb.append(prefix+"mapName: ");
               sb.append(getMapName());
               sb.append("\n");
            }
            return sb;
         }

         public MapAddBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public MapAddBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 10:
                  setMapName(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=MapAddBean.class )
               return false;
            
            return equals((MapAddBean)obj);
         }
         
         public boolean equals(MapAddBean obj) {
            if (hasMapName() ^ obj.hasMapName() ) 
               return false;
            if (hasMapName() && ( !getMapName().equals(obj.getMapName()) ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=960698133;
            if (hasMapName()) {
               rc ^= ( -1793778201^getMapName().hashCode() );
            }
            return rc;
         }
         
         public MapAddBean mergeFrom(MapAdd other) {
            copyCheck();
            if (other.hasMapName()) {
               setMapName(other.getMapName());
            }
            return this;
         }

         public void clear() {
            clearMapName();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_mapName = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_mapName = true;
               } else {
                  f_mapName = null;
                  b_mapName = false;
               }
            }
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_mapName!=null ) {
               out.writeInt(bean.f_mapName.getLength());
               out.write(bean.f_mapName.getData(), bean.f_mapName.getOffset(), bean.f_mapName.getLength());
            } else {
               out.writeInt(-1);
            }
         }

         public Type toType() {
            return Type.MAP_ADD;
         }

      }

      static public final class MapAddBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<MapAdd.MapAddBean, MapAdd.MapAddBuffer>, MapAdd {

         private MapAddBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private MapAddBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private MapAddBuffer(MapAddBean bean) {
            this.bean = bean;
         }

         public MapAddBean copy() {
            return bean().copy();
         }

         public MapAddBuffer freeze() {
            return this;
         }

         private MapAddBean bean() {
            if (bean == null) {
               try {
                  bean = new MapAddBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional bytes mapName = 1;
         public boolean hasMapName() {
            return bean().hasMapName();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getMapName() {
            return bean().getMapName();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasMapName()) {
                  output.writeBytes(1, bean.getMapName());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasMapName()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(1, getMapName());
            }
            return size;
         }

         public static MapAddBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new MapAddBean().mergeUnframed(data);
         }

         public static MapAddBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static MapAddBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new MapAddBuffer(data);
         }

         public static MapAddBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static MapAddBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            MapAddBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static MapAddBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               MapAddBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static MapAddBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static MapAddBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=MapAddBuffer.class )
               return false;
            
            return equals((MapAddBuffer)obj);
         }
         
         public boolean equals(MapAddBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=-172141979 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.MAP_ADD;
         }

      }

   }


   static public interface MapRemove extends org.fusesource.hawtbuf.proto.PBMessage<MapRemove.MapRemoveBean, MapRemove.MapRemoveBuffer>, Type.TypeCreatable {

      // optional bytes mapName = 1;
      public boolean hasMapName();
      public org.fusesource.hawtbuf.AsciiBuffer getMapName();
      public MapRemoveBean copy();
      public MapRemoveBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class MapRemoveBean implements MapRemove {

         MapRemoveBuffer frozen;
         MapRemoveBean bean;

         public MapRemoveBean() {
            this.bean = this;
         }

         public MapRemoveBean(MapRemoveBean copy) {
            this.bean = copy;
         }

         public MapRemoveBean copy() {
            return new MapRemoveBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public MapRemoveBuffer freeze() {
            if( frozen==null ) {
               frozen = new MapRemoveBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(MapRemoveBean other) {
            this.bean = this;
            this.f_mapName = other.f_mapName;
            this.b_mapName = other.b_mapName;
         }

         // optional bytes mapName = 1;
         private org.fusesource.hawtbuf.AsciiBuffer f_mapName = null;
         private boolean b_mapName;

         public boolean hasMapName() {
            return bean.b_mapName;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getMapName() {
            return bean.f_mapName;
         }

         public MapRemoveBean setMapName(org.fusesource.hawtbuf.AsciiBuffer mapName) {
            copyCheck();
            this.b_mapName = true;
            this.f_mapName = mapName;
            return this;
         }

         public void clearMapName() {
            copyCheck();
            this.b_mapName = false;
            this.f_mapName = null;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasMapName() ) {
               sb.append(prefix+"mapName: ");
               sb.append(getMapName());
               sb.append("\n");
            }
            return sb;
         }

         public MapRemoveBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public MapRemoveBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 10:
                  setMapName(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=MapRemoveBean.class )
               return false;
            
            return equals((MapRemoveBean)obj);
         }
         
         public boolean equals(MapRemoveBean obj) {
            if (hasMapName() ^ obj.hasMapName() ) 
               return false;
            if (hasMapName() && ( !getMapName().equals(obj.getMapName()) ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=-2079634256;
            if (hasMapName()) {
               rc ^= ( -1793778201^getMapName().hashCode() );
            }
            return rc;
         }
         
         public MapRemoveBean mergeFrom(MapRemove other) {
            copyCheck();
            if (other.hasMapName()) {
               setMapName(other.getMapName());
            }
            return this;
         }

         public void clear() {
            clearMapName();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_mapName = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_mapName = true;
               } else {
                  f_mapName = null;
                  b_mapName = false;
               }
            }
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_mapName!=null ) {
               out.writeInt(bean.f_mapName.getLength());
               out.write(bean.f_mapName.getData(), bean.f_mapName.getOffset(), bean.f_mapName.getLength());
            } else {
               out.writeInt(-1);
            }
         }

         public Type toType() {
            return Type.MAP_REMOVE;
         }

      }

      static public final class MapRemoveBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<MapRemove.MapRemoveBean, MapRemove.MapRemoveBuffer>, MapRemove {

         private MapRemoveBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private MapRemoveBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private MapRemoveBuffer(MapRemoveBean bean) {
            this.bean = bean;
         }

         public MapRemoveBean copy() {
            return bean().copy();
         }

         public MapRemoveBuffer freeze() {
            return this;
         }

         private MapRemoveBean bean() {
            if (bean == null) {
               try {
                  bean = new MapRemoveBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional bytes mapName = 1;
         public boolean hasMapName() {
            return bean().hasMapName();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getMapName() {
            return bean().getMapName();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasMapName()) {
                  output.writeBytes(1, bean.getMapName());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasMapName()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(1, getMapName());
            }
            return size;
         }

         public static MapRemoveBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new MapRemoveBean().mergeUnframed(data);
         }

         public static MapRemoveBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static MapRemoveBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new MapRemoveBuffer(data);
         }

         public static MapRemoveBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static MapRemoveBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            MapRemoveBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static MapRemoveBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               MapRemoveBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static MapRemoveBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static MapRemoveBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=MapRemoveBuffer.class )
               return false;
            
            return equals((MapRemoveBuffer)obj);
         }
         
         public boolean equals(MapRemoveBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=-1353806528 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.MAP_REMOVE;
         }

      }

   }


   static public interface MapEntryPut extends org.fusesource.hawtbuf.proto.PBMessage<MapEntryPut.MapEntryPutBean, MapEntryPut.MapEntryPutBuffer>, Type.TypeCreatable {

      // optional bytes mapName = 1;
      public boolean hasMapName();
      public org.fusesource.hawtbuf.AsciiBuffer getMapName();
      // optional bytes key = 2;
      public boolean hasKey();
      public org.fusesource.hawtbuf.AsciiBuffer getKey();
      // optional bytes value = 3;
      public boolean hasValue();
      public org.fusesource.hawtbuf.Buffer getValue();
      public MapEntryPutBean copy();
      public MapEntryPutBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class MapEntryPutBean implements MapEntryPut {

         MapEntryPutBuffer frozen;
         MapEntryPutBean bean;

         public MapEntryPutBean() {
            this.bean = this;
         }

         public MapEntryPutBean(MapEntryPutBean copy) {
            this.bean = copy;
         }

         public MapEntryPutBean copy() {
            return new MapEntryPutBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public MapEntryPutBuffer freeze() {
            if( frozen==null ) {
               frozen = new MapEntryPutBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(MapEntryPutBean other) {
            this.bean = this;
            this.f_mapName = other.f_mapName;
            this.b_mapName = other.b_mapName;
            this.f_key = other.f_key;
            this.b_key = other.b_key;
            this.f_value = other.f_value;
            this.b_value = other.b_value;
         }

         // optional bytes mapName = 1;
         private org.fusesource.hawtbuf.AsciiBuffer f_mapName = null;
         private boolean b_mapName;

         public boolean hasMapName() {
            return bean.b_mapName;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getMapName() {
            return bean.f_mapName;
         }

         public MapEntryPutBean setMapName(org.fusesource.hawtbuf.AsciiBuffer mapName) {
            copyCheck();
            this.b_mapName = true;
            this.f_mapName = mapName;
            return this;
         }

         public void clearMapName() {
            copyCheck();
            this.b_mapName = false;
            this.f_mapName = null;
         }

         // optional bytes key = 2;
         private org.fusesource.hawtbuf.AsciiBuffer f_key = null;
         private boolean b_key;

         public boolean hasKey() {
            return bean.b_key;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getKey() {
            return bean.f_key;
         }

         public MapEntryPutBean setKey(org.fusesource.hawtbuf.AsciiBuffer key) {
            copyCheck();
            this.b_key = true;
            this.f_key = key;
            return this;
         }

         public void clearKey() {
            copyCheck();
            this.b_key = false;
            this.f_key = null;
         }

         // optional bytes value = 3;
         private org.fusesource.hawtbuf.Buffer f_value = null;
         private boolean b_value;

         public boolean hasValue() {
            return bean.b_value;
         }

         public org.fusesource.hawtbuf.Buffer getValue() {
            return bean.f_value;
         }

         public MapEntryPutBean setValue(org.fusesource.hawtbuf.Buffer value) {
            copyCheck();
            this.b_value = true;
            this.f_value = value;
            return this;
         }

         public void clearValue() {
            copyCheck();
            this.b_value = false;
            this.f_value = null;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasMapName() ) {
               sb.append(prefix+"mapName: ");
               sb.append(getMapName());
               sb.append("\n");
            }
            if(  hasKey() ) {
               sb.append(prefix+"key: ");
               sb.append(getKey());
               sb.append("\n");
            }
            if(  hasValue() ) {
               sb.append(prefix+"value: ");
               sb.append(getValue());
               sb.append("\n");
            }
            return sb;
         }

         public MapEntryPutBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public MapEntryPutBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 10:
                  setMapName(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               case 18:
                  setKey(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               case 26:
                  setValue(input.readBytes());
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=MapEntryPutBean.class )
               return false;
            
            return equals((MapEntryPutBean)obj);
         }
         
         public boolean equals(MapEntryPutBean obj) {
            if (hasMapName() ^ obj.hasMapName() ) 
               return false;
            if (hasMapName() && ( !getMapName().equals(obj.getMapName()) ))
               return false;
            if (hasKey() ^ obj.hasKey() ) 
               return false;
            if (hasKey() && ( !getKey().equals(obj.getKey()) ))
               return false;
            if (hasValue() ^ obj.hasValue() ) 
               return false;
            if (hasValue() && ( !getValue().equals(obj.getValue()) ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=701246953;
            if (hasMapName()) {
               rc ^= ( -1793778201^getMapName().hashCode() );
            }
            if (hasKey()) {
               rc ^= ( 75327^getKey().hashCode() );
            }
            if (hasValue()) {
               rc ^= ( 82420049^getValue().hashCode() );
            }
            return rc;
         }
         
         public MapEntryPutBean mergeFrom(MapEntryPut other) {
            copyCheck();
            if (other.hasMapName()) {
               setMapName(other.getMapName());
            }
            if (other.hasKey()) {
               setKey(other.getKey());
            }
            if (other.hasValue()) {
               setValue(other.getValue());
            }
            return this;
         }

         public void clear() {
            clearMapName();
            clearKey();
            clearValue();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_mapName = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_mapName = true;
               } else {
                  f_mapName = null;
                  b_mapName = false;
               }
            }
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_key = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_key = true;
               } else {
                  f_key = null;
                  b_key = false;
               }
            }
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_value = new org.fusesource.hawtbuf.Buffer(b);
                  b_value = true;
               } else {
                  f_value = null;
                  b_value = false;
               }
            }
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_mapName!=null ) {
               out.writeInt(bean.f_mapName.getLength());
               out.write(bean.f_mapName.getData(), bean.f_mapName.getOffset(), bean.f_mapName.getLength());
            } else {
               out.writeInt(-1);
            }
            if( bean.f_key!=null ) {
               out.writeInt(bean.f_key.getLength());
               out.write(bean.f_key.getData(), bean.f_key.getOffset(), bean.f_key.getLength());
            } else {
               out.writeInt(-1);
            }
            if( bean.f_value!=null ) {
               out.writeInt(bean.f_value.getLength());
               out.write(bean.f_value.getData(), bean.f_value.getOffset(), bean.f_value.getLength());
            } else {
               out.writeInt(-1);
            }
         }

         public Type toType() {
            return Type.MAP_ENTRY_PUT;
         }

      }

      static public final class MapEntryPutBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<MapEntryPut.MapEntryPutBean, MapEntryPut.MapEntryPutBuffer>, MapEntryPut {

         private MapEntryPutBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private MapEntryPutBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private MapEntryPutBuffer(MapEntryPutBean bean) {
            this.bean = bean;
         }

         public MapEntryPutBean copy() {
            return bean().copy();
         }

         public MapEntryPutBuffer freeze() {
            return this;
         }

         private MapEntryPutBean bean() {
            if (bean == null) {
               try {
                  bean = new MapEntryPutBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional bytes mapName = 1;
         public boolean hasMapName() {
            return bean().hasMapName();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getMapName() {
            return bean().getMapName();
         }

         // optional bytes key = 2;
         public boolean hasKey() {
            return bean().hasKey();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getKey() {
            return bean().getKey();
         }

         // optional bytes value = 3;
         public boolean hasValue() {
            return bean().hasValue();
         }

         public org.fusesource.hawtbuf.Buffer getValue() {
            return bean().getValue();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasMapName()) {
                  output.writeBytes(1, bean.getMapName());
               }
               if (bean.hasKey()) {
                  output.writeBytes(2, bean.getKey());
               }
               if (bean.hasValue()) {
                  output.writeBytes(3, bean.getValue());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasMapName()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(1, getMapName());
            }
            if (hasKey()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(2, getKey());
            }
            if (hasValue()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(3, getValue());
            }
            return size;
         }

         public static MapEntryPutBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new MapEntryPutBean().mergeUnframed(data);
         }

         public static MapEntryPutBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static MapEntryPutBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new MapEntryPutBuffer(data);
         }

         public static MapEntryPutBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static MapEntryPutBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            MapEntryPutBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static MapEntryPutBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               MapEntryPutBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static MapEntryPutBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static MapEntryPutBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=MapEntryPutBuffer.class )
               return false;
            
            return equals((MapEntryPutBuffer)obj);
         }
         
         public boolean equals(MapEntryPutBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=-396622791 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.MAP_ENTRY_PUT;
         }

      }

   }


   static public interface MapEntryRemove extends org.fusesource.hawtbuf.proto.PBMessage<MapEntryRemove.MapEntryRemoveBean, MapEntryRemove.MapEntryRemoveBuffer>, Type.TypeCreatable {

      // optional bytes mapName = 1;
      public boolean hasMapName();
      public org.fusesource.hawtbuf.AsciiBuffer getMapName();
      // optional bytes key = 2;
      public boolean hasKey();
      public org.fusesource.hawtbuf.AsciiBuffer getKey();
      public MapEntryRemoveBean copy();
      public MapEntryRemoveBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class MapEntryRemoveBean implements MapEntryRemove {

         MapEntryRemoveBuffer frozen;
         MapEntryRemoveBean bean;

         public MapEntryRemoveBean() {
            this.bean = this;
         }

         public MapEntryRemoveBean(MapEntryRemoveBean copy) {
            this.bean = copy;
         }

         public MapEntryRemoveBean copy() {
            return new MapEntryRemoveBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public MapEntryRemoveBuffer freeze() {
            if( frozen==null ) {
               frozen = new MapEntryRemoveBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(MapEntryRemoveBean other) {
            this.bean = this;
            this.f_mapName = other.f_mapName;
            this.b_mapName = other.b_mapName;
            this.f_key = other.f_key;
            this.b_key = other.b_key;
         }

         // optional bytes mapName = 1;
         private org.fusesource.hawtbuf.AsciiBuffer f_mapName = null;
         private boolean b_mapName;

         public boolean hasMapName() {
            return bean.b_mapName;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getMapName() {
            return bean.f_mapName;
         }

         public MapEntryRemoveBean setMapName(org.fusesource.hawtbuf.AsciiBuffer mapName) {
            copyCheck();
            this.b_mapName = true;
            this.f_mapName = mapName;
            return this;
         }

         public void clearMapName() {
            copyCheck();
            this.b_mapName = false;
            this.f_mapName = null;
         }

         // optional bytes key = 2;
         private org.fusesource.hawtbuf.AsciiBuffer f_key = null;
         private boolean b_key;

         public boolean hasKey() {
            return bean.b_key;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getKey() {
            return bean.f_key;
         }

         public MapEntryRemoveBean setKey(org.fusesource.hawtbuf.AsciiBuffer key) {
            copyCheck();
            this.b_key = true;
            this.f_key = key;
            return this;
         }

         public void clearKey() {
            copyCheck();
            this.b_key = false;
            this.f_key = null;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasMapName() ) {
               sb.append(prefix+"mapName: ");
               sb.append(getMapName());
               sb.append("\n");
            }
            if(  hasKey() ) {
               sb.append(prefix+"key: ");
               sb.append(getKey());
               sb.append("\n");
            }
            return sb;
         }

         public MapEntryRemoveBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public MapEntryRemoveBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 10:
                  setMapName(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               case 18:
                  setKey(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=MapEntryRemoveBean.class )
               return false;
            
            return equals((MapEntryRemoveBean)obj);
         }
         
         public boolean equals(MapEntryRemoveBean obj) {
            if (hasMapName() ^ obj.hasMapName() ) 
               return false;
            if (hasMapName() && ( !getMapName().equals(obj.getMapName()) ))
               return false;
            if (hasKey() ^ obj.hasKey() ) 
               return false;
            if (hasKey() && ( !getKey().equals(obj.getKey()) ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=1045890954;
            if (hasMapName()) {
               rc ^= ( -1793778201^getMapName().hashCode() );
            }
            if (hasKey()) {
               rc ^= ( 75327^getKey().hashCode() );
            }
            return rc;
         }
         
         public MapEntryRemoveBean mergeFrom(MapEntryRemove other) {
            copyCheck();
            if (other.hasMapName()) {
               setMapName(other.getMapName());
            }
            if (other.hasKey()) {
               setKey(other.getKey());
            }
            return this;
         }

         public void clear() {
            clearMapName();
            clearKey();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_mapName = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_mapName = true;
               } else {
                  f_mapName = null;
                  b_mapName = false;
               }
            }
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_key = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_key = true;
               } else {
                  f_key = null;
                  b_key = false;
               }
            }
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_mapName!=null ) {
               out.writeInt(bean.f_mapName.getLength());
               out.write(bean.f_mapName.getData(), bean.f_mapName.getOffset(), bean.f_mapName.getLength());
            } else {
               out.writeInt(-1);
            }
            if( bean.f_key!=null ) {
               out.writeInt(bean.f_key.getLength());
               out.write(bean.f_key.getData(), bean.f_key.getOffset(), bean.f_key.getLength());
            } else {
               out.writeInt(-1);
            }
         }

         public Type toType() {
            return Type.MAP_ENTRY_REMOVE;
         }

      }

      static public final class MapEntryRemoveBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<MapEntryRemove.MapEntryRemoveBean, MapEntryRemove.MapEntryRemoveBuffer>, MapEntryRemove {

         private MapEntryRemoveBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private MapEntryRemoveBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private MapEntryRemoveBuffer(MapEntryRemoveBean bean) {
            this.bean = bean;
         }

         public MapEntryRemoveBean copy() {
            return bean().copy();
         }

         public MapEntryRemoveBuffer freeze() {
            return this;
         }

         private MapEntryRemoveBean bean() {
            if (bean == null) {
               try {
                  bean = new MapEntryRemoveBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional bytes mapName = 1;
         public boolean hasMapName() {
            return bean().hasMapName();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getMapName() {
            return bean().getMapName();
         }

         // optional bytes key = 2;
         public boolean hasKey() {
            return bean().hasKey();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getKey() {
            return bean().getKey();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasMapName()) {
                  output.writeBytes(1, bean.getMapName());
               }
               if (bean.hasKey()) {
                  output.writeBytes(2, bean.getKey());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasMapName()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(1, getMapName());
            }
            if (hasKey()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(2, getKey());
            }
            return size;
         }

         public static MapEntryRemoveBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new MapEntryRemoveBean().mergeUnframed(data);
         }

         public static MapEntryRemoveBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static MapEntryRemoveBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new MapEntryRemoveBuffer(data);
         }

         public static MapEntryRemoveBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static MapEntryRemoveBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            MapEntryRemoveBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static MapEntryRemoveBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               MapEntryRemoveBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static MapEntryRemoveBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static MapEntryRemoveBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=MapEntryRemoveBuffer.class )
               return false;
            
            return equals((MapEntryRemoveBuffer)obj);
         }
         
         public boolean equals(MapEntryRemoveBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=93780378 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.MAP_ENTRY_REMOVE;
         }

      }

   }


   static public interface StreamOpen extends org.fusesource.hawtbuf.proto.PBMessage<StreamOpen.StreamOpenBean, StreamOpen.StreamOpenBuffer>, Type.TypeCreatable {

      // optional int64 streamKey = 1;
      public boolean hasStreamKey();
      public long getStreamKey();
      public StreamOpenBean copy();
      public StreamOpenBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class StreamOpenBean implements StreamOpen {

         StreamOpenBuffer frozen;
         StreamOpenBean bean;

         public StreamOpenBean() {
            this.bean = this;
         }

         public StreamOpenBean(StreamOpenBean copy) {
            this.bean = copy;
         }

         public StreamOpenBean copy() {
            return new StreamOpenBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public StreamOpenBuffer freeze() {
            if( frozen==null ) {
               frozen = new StreamOpenBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(StreamOpenBean other) {
            this.bean = this;
            this.f_streamKey = other.f_streamKey;
            this.b_streamKey = other.b_streamKey;
         }

         // optional int64 streamKey = 1;
         private long f_streamKey = 0;
         private boolean b_streamKey;

         public boolean hasStreamKey() {
            return bean.b_streamKey;
         }

         public long getStreamKey() {
            return bean.f_streamKey;
         }

         public StreamOpenBean setStreamKey(long streamKey) {
            copyCheck();
            this.b_streamKey = true;
            this.f_streamKey = streamKey;
            return this;
         }

         public void clearStreamKey() {
            copyCheck();
            this.b_streamKey = false;
            this.f_streamKey = 0;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasStreamKey() ) {
               sb.append(prefix+"streamKey: ");
               sb.append(getStreamKey());
               sb.append("\n");
            }
            return sb;
         }

         public StreamOpenBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public StreamOpenBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 8:
                  setStreamKey(input.readInt64());
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=StreamOpenBean.class )
               return false;
            
            return equals((StreamOpenBean)obj);
         }
         
         public boolean equals(StreamOpenBean obj) {
            if (hasStreamKey() ^ obj.hasStreamKey() ) 
               return false;
            if (hasStreamKey() && ( getStreamKey()!=obj.getStreamKey() ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=273840346;
            if (hasStreamKey()) {
               rc ^= ( 1688323743^(new Long(getStreamKey())).hashCode() );
            }
            return rc;
         }
         
         public StreamOpenBean mergeFrom(StreamOpen other) {
            copyCheck();
            if (other.hasStreamKey()) {
               setStreamKey(other.getStreamKey());
            }
            return this;
         }

         public void clear() {
            clearStreamKey();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            f_streamKey = in.readLong();
            b_streamKey = true;
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            out.writeLong(bean.f_streamKey);
         }

         public Type toType() {
            return Type.STREAM_OPEN;
         }

      }

      static public final class StreamOpenBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<StreamOpen.StreamOpenBean, StreamOpen.StreamOpenBuffer>, StreamOpen {

         private StreamOpenBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private StreamOpenBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private StreamOpenBuffer(StreamOpenBean bean) {
            this.bean = bean;
         }

         public StreamOpenBean copy() {
            return bean().copy();
         }

         public StreamOpenBuffer freeze() {
            return this;
         }

         private StreamOpenBean bean() {
            if (bean == null) {
               try {
                  bean = new StreamOpenBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional int64 streamKey = 1;
         public boolean hasStreamKey() {
            return bean().hasStreamKey();
         }

         public long getStreamKey() {
            return bean().getStreamKey();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasStreamKey()) {
                  output.writeInt64(1, bean.getStreamKey());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasStreamKey()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(1, getStreamKey());
            }
            return size;
         }

         public static StreamOpenBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new StreamOpenBean().mergeUnframed(data);
         }

         public static StreamOpenBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static StreamOpenBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new StreamOpenBuffer(data);
         }

         public static StreamOpenBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static StreamOpenBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            StreamOpenBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static StreamOpenBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               StreamOpenBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static StreamOpenBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static StreamOpenBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=StreamOpenBuffer.class )
               return false;
            
            return equals((StreamOpenBuffer)obj);
         }
         
         public boolean equals(StreamOpenBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=1182488298 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.STREAM_OPEN;
         }

      }

   }


   static public interface StreamWrite extends org.fusesource.hawtbuf.proto.PBMessage<StreamWrite.StreamWriteBean, StreamWrite.StreamWriteBuffer>, Type.TypeCreatable {

      // optional int64 streamKey = 1;
      public boolean hasStreamKey();
      public long getStreamKey();
      // optional bytes data = 2;
      public boolean hasData();
      public org.fusesource.hawtbuf.Buffer getData();
      public StreamWriteBean copy();
      public StreamWriteBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class StreamWriteBean implements StreamWrite {

         StreamWriteBuffer frozen;
         StreamWriteBean bean;

         public StreamWriteBean() {
            this.bean = this;
         }

         public StreamWriteBean(StreamWriteBean copy) {
            this.bean = copy;
         }

         public StreamWriteBean copy() {
            return new StreamWriteBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public StreamWriteBuffer freeze() {
            if( frozen==null ) {
               frozen = new StreamWriteBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(StreamWriteBean other) {
            this.bean = this;
            this.f_streamKey = other.f_streamKey;
            this.b_streamKey = other.b_streamKey;
            this.f_data = other.f_data;
            this.b_data = other.b_data;
         }

         // optional int64 streamKey = 1;
         private long f_streamKey = 0;
         private boolean b_streamKey;

         public boolean hasStreamKey() {
            return bean.b_streamKey;
         }

         public long getStreamKey() {
            return bean.f_streamKey;
         }

         public StreamWriteBean setStreamKey(long streamKey) {
            copyCheck();
            this.b_streamKey = true;
            this.f_streamKey = streamKey;
            return this;
         }

         public void clearStreamKey() {
            copyCheck();
            this.b_streamKey = false;
            this.f_streamKey = 0;
         }

         // optional bytes data = 2;
         private org.fusesource.hawtbuf.Buffer f_data = null;
         private boolean b_data;

         public boolean hasData() {
            return bean.b_data;
         }

         public org.fusesource.hawtbuf.Buffer getData() {
            return bean.f_data;
         }

         public StreamWriteBean setData(org.fusesource.hawtbuf.Buffer data) {
            copyCheck();
            this.b_data = true;
            this.f_data = data;
            return this;
         }

         public void clearData() {
            copyCheck();
            this.b_data = false;
            this.f_data = null;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasStreamKey() ) {
               sb.append(prefix+"streamKey: ");
               sb.append(getStreamKey());
               sb.append("\n");
            }
            if(  hasData() ) {
               sb.append(prefix+"data: ");
               sb.append(getData());
               sb.append("\n");
            }
            return sb;
         }

         public StreamWriteBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public StreamWriteBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 8:
                  setStreamKey(input.readInt64());
                  break;
               case 18:
                  setData(input.readBytes());
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=StreamWriteBean.class )
               return false;
            
            return equals((StreamWriteBean)obj);
         }
         
         public boolean equals(StreamWriteBean obj) {
            if (hasStreamKey() ^ obj.hasStreamKey() ) 
               return false;
            if (hasStreamKey() && ( getStreamKey()!=obj.getStreamKey() ))
               return false;
            if (hasData() ^ obj.hasData() ) 
               return false;
            if (hasData() && ( !getData().equals(obj.getData()) ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=1268109423;
            if (hasStreamKey()) {
               rc ^= ( 1688323743^(new Long(getStreamKey())).hashCode() );
            }
            if (hasData()) {
               rc ^= ( 2122698^getData().hashCode() );
            }
            return rc;
         }
         
         public StreamWriteBean mergeFrom(StreamWrite other) {
            copyCheck();
            if (other.hasStreamKey()) {
               setStreamKey(other.getStreamKey());
            }
            if (other.hasData()) {
               setData(other.getData());
            }
            return this;
         }

         public void clear() {
            clearStreamKey();
            clearData();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            f_streamKey = in.readLong();
            b_streamKey = true;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_data = new org.fusesource.hawtbuf.Buffer(b);
                  b_data = true;
               } else {
                  f_data = null;
                  b_data = false;
               }
            }
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            out.writeLong(bean.f_streamKey);
            if( bean.f_data!=null ) {
               out.writeInt(bean.f_data.getLength());
               out.write(bean.f_data.getData(), bean.f_data.getOffset(), bean.f_data.getLength());
            } else {
               out.writeInt(-1);
            }
         }

         public Type toType() {
            return Type.STREAM_WRITE;
         }

      }

      static public final class StreamWriteBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<StreamWrite.StreamWriteBean, StreamWrite.StreamWriteBuffer>, StreamWrite {

         private StreamWriteBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private StreamWriteBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private StreamWriteBuffer(StreamWriteBean bean) {
            this.bean = bean;
         }

         public StreamWriteBean copy() {
            return bean().copy();
         }

         public StreamWriteBuffer freeze() {
            return this;
         }

         private StreamWriteBean bean() {
            if (bean == null) {
               try {
                  bean = new StreamWriteBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional int64 streamKey = 1;
         public boolean hasStreamKey() {
            return bean().hasStreamKey();
         }

         public long getStreamKey() {
            return bean().getStreamKey();
         }

         // optional bytes data = 2;
         public boolean hasData() {
            return bean().hasData();
         }

         public org.fusesource.hawtbuf.Buffer getData() {
            return bean().getData();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasStreamKey()) {
                  output.writeInt64(1, bean.getStreamKey());
               }
               if (bean.hasData()) {
                  output.writeBytes(2, bean.getData());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasStreamKey()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(1, getStreamKey());
            }
            if (hasData()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(2, getData());
            }
            return size;
         }

         public static StreamWriteBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new StreamWriteBean().mergeUnframed(data);
         }

         public static StreamWriteBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static StreamWriteBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new StreamWriteBuffer(data);
         }

         public static StreamWriteBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static StreamWriteBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            StreamWriteBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static StreamWriteBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               StreamWriteBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static StreamWriteBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static StreamWriteBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=StreamWriteBuffer.class )
               return false;
            
            return equals((StreamWriteBuffer)obj);
         }
         
         public boolean equals(StreamWriteBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=-1102635713 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.STREAM_WRITE;
         }

      }

   }


   static public interface StreamClose extends org.fusesource.hawtbuf.proto.PBMessage<StreamClose.StreamCloseBean, StreamClose.StreamCloseBuffer>, Type.TypeCreatable {

      // optional int64 streamKey = 1;
      public boolean hasStreamKey();
      public long getStreamKey();
      public StreamCloseBean copy();
      public StreamCloseBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class StreamCloseBean implements StreamClose {

         StreamCloseBuffer frozen;
         StreamCloseBean bean;

         public StreamCloseBean() {
            this.bean = this;
         }

         public StreamCloseBean(StreamCloseBean copy) {
            this.bean = copy;
         }

         public StreamCloseBean copy() {
            return new StreamCloseBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public StreamCloseBuffer freeze() {
            if( frozen==null ) {
               frozen = new StreamCloseBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(StreamCloseBean other) {
            this.bean = this;
            this.f_streamKey = other.f_streamKey;
            this.b_streamKey = other.b_streamKey;
         }

         // optional int64 streamKey = 1;
         private long f_streamKey = 0;
         private boolean b_streamKey;

         public boolean hasStreamKey() {
            return bean.b_streamKey;
         }

         public long getStreamKey() {
            return bean.f_streamKey;
         }

         public StreamCloseBean setStreamKey(long streamKey) {
            copyCheck();
            this.b_streamKey = true;
            this.f_streamKey = streamKey;
            return this;
         }

         public void clearStreamKey() {
            copyCheck();
            this.b_streamKey = false;
            this.f_streamKey = 0;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasStreamKey() ) {
               sb.append(prefix+"streamKey: ");
               sb.append(getStreamKey());
               sb.append("\n");
            }
            return sb;
         }

         public StreamCloseBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public StreamCloseBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 8:
                  setStreamKey(input.readInt64());
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=StreamCloseBean.class )
               return false;
            
            return equals((StreamCloseBean)obj);
         }
         
         public boolean equals(StreamCloseBean obj) {
            if (hasStreamKey() ^ obj.hasStreamKey() ) 
               return false;
            if (hasStreamKey() && ( getStreamKey()!=obj.getStreamKey() ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=-2103008760;
            if (hasStreamKey()) {
               rc ^= ( 1688323743^(new Long(getStreamKey())).hashCode() );
            }
            return rc;
         }
         
         public StreamCloseBean mergeFrom(StreamClose other) {
            copyCheck();
            if (other.hasStreamKey()) {
               setStreamKey(other.getStreamKey());
            }
            return this;
         }

         public void clear() {
            clearStreamKey();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            f_streamKey = in.readLong();
            b_streamKey = true;
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            out.writeLong(bean.f_streamKey);
         }

         public Type toType() {
            return Type.STREAM_CLOSE;
         }

      }

      static public final class StreamCloseBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<StreamClose.StreamCloseBean, StreamClose.StreamCloseBuffer>, StreamClose {

         private StreamCloseBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private StreamCloseBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private StreamCloseBuffer(StreamCloseBean bean) {
            this.bean = bean;
         }

         public StreamCloseBean copy() {
            return bean().copy();
         }

         public StreamCloseBuffer freeze() {
            return this;
         }

         private StreamCloseBean bean() {
            if (bean == null) {
               try {
                  bean = new StreamCloseBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional int64 streamKey = 1;
         public boolean hasStreamKey() {
            return bean().hasStreamKey();
         }

         public long getStreamKey() {
            return bean().getStreamKey();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasStreamKey()) {
                  output.writeInt64(1, bean.getStreamKey());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasStreamKey()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(1, getStreamKey());
            }
            return size;
         }

         public static StreamCloseBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new StreamCloseBean().mergeUnframed(data);
         }

         public static StreamCloseBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static StreamCloseBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new StreamCloseBuffer(data);
         }

         public static StreamCloseBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static StreamCloseBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            StreamCloseBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static StreamCloseBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               StreamCloseBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static StreamCloseBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static StreamCloseBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=StreamCloseBuffer.class )
               return false;
            
            return equals((StreamCloseBuffer)obj);
         }
         
         public boolean equals(StreamCloseBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=1953098904 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.STREAM_CLOSE;
         }

      }

   }


   static public interface StreamRemove extends org.fusesource.hawtbuf.proto.PBMessage<StreamRemove.StreamRemoveBean, StreamRemove.StreamRemoveBuffer>, Type.TypeCreatable {

      // optional int64 streamKey = 1;
      public boolean hasStreamKey();
      public long getStreamKey();
      public StreamRemoveBean copy();
      public StreamRemoveBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class StreamRemoveBean implements StreamRemove {

         StreamRemoveBuffer frozen;
         StreamRemoveBean bean;

         public StreamRemoveBean() {
            this.bean = this;
         }

         public StreamRemoveBean(StreamRemoveBean copy) {
            this.bean = copy;
         }

         public StreamRemoveBean copy() {
            return new StreamRemoveBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public StreamRemoveBuffer freeze() {
            if( frozen==null ) {
               frozen = new StreamRemoveBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(StreamRemoveBean other) {
            this.bean = this;
            this.f_streamKey = other.f_streamKey;
            this.b_streamKey = other.b_streamKey;
         }

         // optional int64 streamKey = 1;
         private long f_streamKey = 0;
         private boolean b_streamKey;

         public boolean hasStreamKey() {
            return bean.b_streamKey;
         }

         public long getStreamKey() {
            return bean.f_streamKey;
         }

         public StreamRemoveBean setStreamKey(long streamKey) {
            copyCheck();
            this.b_streamKey = true;
            this.f_streamKey = streamKey;
            return this;
         }

         public void clearStreamKey() {
            copyCheck();
            this.b_streamKey = false;
            this.f_streamKey = 0;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasStreamKey() ) {
               sb.append(prefix+"streamKey: ");
               sb.append(getStreamKey());
               sb.append("\n");
            }
            return sb;
         }

         public StreamRemoveBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public StreamRemoveBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 8:
                  setStreamKey(input.readInt64());
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=StreamRemoveBean.class )
               return false;
            
            return equals((StreamRemoveBean)obj);
         }
         
         public boolean equals(StreamRemoveBean obj) {
            if (hasStreamKey() ^ obj.hasStreamKey() ) 
               return false;
            if (hasStreamKey() && ( getStreamKey()!=obj.getStreamKey() ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=-1876906476;
            if (hasStreamKey()) {
               rc ^= ( 1688323743^(new Long(getStreamKey())).hashCode() );
            }
            return rc;
         }
         
         public StreamRemoveBean mergeFrom(StreamRemove other) {
            copyCheck();
            if (other.hasStreamKey()) {
               setStreamKey(other.getStreamKey());
            }
            return this;
         }

         public void clear() {
            clearStreamKey();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            f_streamKey = in.readLong();
            b_streamKey = true;
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            out.writeLong(bean.f_streamKey);
         }

         public Type toType() {
            return Type.STREAM_REMOVE;
         }

      }

      static public final class StreamRemoveBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<StreamRemove.StreamRemoveBean, StreamRemove.StreamRemoveBuffer>, StreamRemove {

         private StreamRemoveBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private StreamRemoveBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private StreamRemoveBuffer(StreamRemoveBean bean) {
            this.bean = bean;
         }

         public StreamRemoveBean copy() {
            return bean().copy();
         }

         public StreamRemoveBuffer freeze() {
            return this;
         }

         private StreamRemoveBean bean() {
            if (bean == null) {
               try {
                  bean = new StreamRemoveBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional int64 streamKey = 1;
         public boolean hasStreamKey() {
            return bean().hasStreamKey();
         }

         public long getStreamKey() {
            return bean().getStreamKey();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasStreamKey()) {
                  output.writeInt64(1, bean.getStreamKey());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasStreamKey()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(1, getStreamKey());
            }
            return size;
         }

         public static StreamRemoveBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new StreamRemoveBean().mergeUnframed(data);
         }

         public static StreamRemoveBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static StreamRemoveBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new StreamRemoveBuffer(data);
         }

         public static StreamRemoveBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static StreamRemoveBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            StreamRemoveBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static StreamRemoveBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               StreamRemoveBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static StreamRemoveBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static StreamRemoveBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=StreamRemoveBuffer.class )
               return false;
            
            return equals((StreamRemoveBuffer)obj);
         }
         
         public boolean equals(StreamRemoveBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=194061732 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.STREAM_REMOVE;
         }

      }

   }


   static public interface TransactionBegin extends org.fusesource.hawtbuf.proto.PBMessage<TransactionBegin.TransactionBeginBean, TransactionBegin.TransactionBeginBuffer>, Type.TypeCreatable {

      // optional bytes txid = 1;
      public boolean hasTxid();
      public org.fusesource.hawtbuf.Buffer getTxid();
      public TransactionBeginBean copy();
      public TransactionBeginBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class TransactionBeginBean implements TransactionBegin {

         TransactionBeginBuffer frozen;
         TransactionBeginBean bean;

         public TransactionBeginBean() {
            this.bean = this;
         }

         public TransactionBeginBean(TransactionBeginBean copy) {
            this.bean = copy;
         }

         public TransactionBeginBean copy() {
            return new TransactionBeginBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public TransactionBeginBuffer freeze() {
            if( frozen==null ) {
               frozen = new TransactionBeginBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(TransactionBeginBean other) {
            this.bean = this;
            this.f_txid = other.f_txid;
            this.b_txid = other.b_txid;
         }

         // optional bytes txid = 1;
         private org.fusesource.hawtbuf.Buffer f_txid = null;
         private boolean b_txid;

         public boolean hasTxid() {
            return bean.b_txid;
         }

         public org.fusesource.hawtbuf.Buffer getTxid() {
            return bean.f_txid;
         }

         public TransactionBeginBean setTxid(org.fusesource.hawtbuf.Buffer txid) {
            copyCheck();
            this.b_txid = true;
            this.f_txid = txid;
            return this;
         }

         public void clearTxid() {
            copyCheck();
            this.b_txid = false;
            this.f_txid = null;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasTxid() ) {
               sb.append(prefix+"txid: ");
               sb.append(getTxid());
               sb.append("\n");
            }
            return sb;
         }

         public TransactionBeginBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public TransactionBeginBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 10:
                  setTxid(input.readBytes());
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=TransactionBeginBean.class )
               return false;
            
            return equals((TransactionBeginBean)obj);
         }
         
         public boolean equals(TransactionBeginBean obj) {
            if (hasTxid() ^ obj.hasTxid() ) 
               return false;
            if (hasTxid() && ( !getTxid().equals(obj.getTxid()) ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=1847090907;
            if (hasTxid()) {
               rc ^= ( 2621119^getTxid().hashCode() );
            }
            return rc;
         }
         
         public TransactionBeginBean mergeFrom(TransactionBegin other) {
            copyCheck();
            if (other.hasTxid()) {
               setTxid(other.getTxid());
            }
            return this;
         }

         public void clear() {
            clearTxid();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_txid = new org.fusesource.hawtbuf.Buffer(b);
                  b_txid = true;
               } else {
                  f_txid = null;
                  b_txid = false;
               }
            }
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_txid!=null ) {
               out.writeInt(bean.f_txid.getLength());
               out.write(bean.f_txid.getData(), bean.f_txid.getOffset(), bean.f_txid.getLength());
            } else {
               out.writeInt(-1);
            }
         }

         public Type toType() {
            return Type.TRANSACTION_BEGIN;
         }

      }

      static public final class TransactionBeginBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<TransactionBegin.TransactionBeginBean, TransactionBegin.TransactionBeginBuffer>, TransactionBegin {

         private TransactionBeginBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private TransactionBeginBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private TransactionBeginBuffer(TransactionBeginBean bean) {
            this.bean = bean;
         }

         public TransactionBeginBean copy() {
            return bean().copy();
         }

         public TransactionBeginBuffer freeze() {
            return this;
         }

         private TransactionBeginBean bean() {
            if (bean == null) {
               try {
                  bean = new TransactionBeginBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional bytes txid = 1;
         public boolean hasTxid() {
            return bean().hasTxid();
         }

         public org.fusesource.hawtbuf.Buffer getTxid() {
            return bean().getTxid();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasTxid()) {
                  output.writeBytes(1, bean.getTxid());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasTxid()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(1, getTxid());
            }
            return size;
         }

         public static TransactionBeginBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new TransactionBeginBean().mergeUnframed(data);
         }

         public static TransactionBeginBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static TransactionBeginBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new TransactionBeginBuffer(data);
         }

         public static TransactionBeginBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static TransactionBeginBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            TransactionBeginBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static TransactionBeginBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               TransactionBeginBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static TransactionBeginBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static TransactionBeginBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=TransactionBeginBuffer.class )
               return false;
            
            return equals((TransactionBeginBuffer)obj);
         }
         
         public boolean equals(TransactionBeginBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=1247789227 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.TRANSACTION_BEGIN;
         }

      }

   }


   static public interface TransactionAddMessage extends org.fusesource.hawtbuf.proto.PBMessage<TransactionAddMessage.TransactionAddMessageBean, TransactionAddMessage.TransactionAddMessageBuffer>, Type.TypeCreatable {

      // optional bytes txid = 1;
      public boolean hasTxid();
      public org.fusesource.hawtbuf.Buffer getTxid();
      // optional int64 messageKey = 2;
      public boolean hasMessageKey();
      public long getMessageKey();
      public TransactionAddMessageBean copy();
      public TransactionAddMessageBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class TransactionAddMessageBean implements TransactionAddMessage {

         TransactionAddMessageBuffer frozen;
         TransactionAddMessageBean bean;

         public TransactionAddMessageBean() {
            this.bean = this;
         }

         public TransactionAddMessageBean(TransactionAddMessageBean copy) {
            this.bean = copy;
         }

         public TransactionAddMessageBean copy() {
            return new TransactionAddMessageBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public TransactionAddMessageBuffer freeze() {
            if( frozen==null ) {
               frozen = new TransactionAddMessageBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(TransactionAddMessageBean other) {
            this.bean = this;
            this.f_txid = other.f_txid;
            this.b_txid = other.b_txid;
            this.f_messageKey = other.f_messageKey;
            this.b_messageKey = other.b_messageKey;
         }

         // optional bytes txid = 1;
         private org.fusesource.hawtbuf.Buffer f_txid = null;
         private boolean b_txid;

         public boolean hasTxid() {
            return bean.b_txid;
         }

         public org.fusesource.hawtbuf.Buffer getTxid() {
            return bean.f_txid;
         }

         public TransactionAddMessageBean setTxid(org.fusesource.hawtbuf.Buffer txid) {
            copyCheck();
            this.b_txid = true;
            this.f_txid = txid;
            return this;
         }

         public void clearTxid() {
            copyCheck();
            this.b_txid = false;
            this.f_txid = null;
         }

         // optional int64 messageKey = 2;
         private long f_messageKey = 0;
         private boolean b_messageKey;

         public boolean hasMessageKey() {
            return bean.b_messageKey;
         }

         public long getMessageKey() {
            return bean.f_messageKey;
         }

         public TransactionAddMessageBean setMessageKey(long messageKey) {
            copyCheck();
            this.b_messageKey = true;
            this.f_messageKey = messageKey;
            return this;
         }

         public void clearMessageKey() {
            copyCheck();
            this.b_messageKey = false;
            this.f_messageKey = 0;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasTxid() ) {
               sb.append(prefix+"txid: ");
               sb.append(getTxid());
               sb.append("\n");
            }
            if(  hasMessageKey() ) {
               sb.append(prefix+"messageKey: ");
               sb.append(getMessageKey());
               sb.append("\n");
            }
            return sb;
         }

         public TransactionAddMessageBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public TransactionAddMessageBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 10:
                  setTxid(input.readBytes());
                  break;
               case 16:
                  setMessageKey(input.readInt64());
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=TransactionAddMessageBean.class )
               return false;
            
            return equals((TransactionAddMessageBean)obj);
         }
         
         public boolean equals(TransactionAddMessageBean obj) {
            if (hasTxid() ^ obj.hasTxid() ) 
               return false;
            if (hasTxid() && ( !getTxid().equals(obj.getTxid()) ))
               return false;
            if (hasMessageKey() ^ obj.hasMessageKey() ) 
               return false;
            if (hasMessageKey() && ( getMessageKey()!=obj.getMessageKey() ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=-1069547692;
            if (hasTxid()) {
               rc ^= ( 2621119^getTxid().hashCode() );
            }
            if (hasMessageKey()) {
               rc ^= ( 302723320^(new Long(getMessageKey())).hashCode() );
            }
            return rc;
         }
         
         public TransactionAddMessageBean mergeFrom(TransactionAddMessage other) {
            copyCheck();
            if (other.hasTxid()) {
               setTxid(other.getTxid());
            }
            if (other.hasMessageKey()) {
               setMessageKey(other.getMessageKey());
            }
            return this;
         }

         public void clear() {
            clearTxid();
            clearMessageKey();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_txid = new org.fusesource.hawtbuf.Buffer(b);
                  b_txid = true;
               } else {
                  f_txid = null;
                  b_txid = false;
               }
            }
            f_messageKey = in.readLong();
            b_messageKey = true;
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_txid!=null ) {
               out.writeInt(bean.f_txid.getLength());
               out.write(bean.f_txid.getData(), bean.f_txid.getOffset(), bean.f_txid.getLength());
            } else {
               out.writeInt(-1);
            }
            out.writeLong(bean.f_messageKey);
         }

         public Type toType() {
            return Type.TRANSACTION_ADD_MESSAGE;
         }

      }

      static public final class TransactionAddMessageBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<TransactionAddMessage.TransactionAddMessageBean, TransactionAddMessage.TransactionAddMessageBuffer>, TransactionAddMessage {

         private TransactionAddMessageBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private TransactionAddMessageBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private TransactionAddMessageBuffer(TransactionAddMessageBean bean) {
            this.bean = bean;
         }

         public TransactionAddMessageBean copy() {
            return bean().copy();
         }

         public TransactionAddMessageBuffer freeze() {
            return this;
         }

         private TransactionAddMessageBean bean() {
            if (bean == null) {
               try {
                  bean = new TransactionAddMessageBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional bytes txid = 1;
         public boolean hasTxid() {
            return bean().hasTxid();
         }

         public org.fusesource.hawtbuf.Buffer getTxid() {
            return bean().getTxid();
         }

         // optional int64 messageKey = 2;
         public boolean hasMessageKey() {
            return bean().hasMessageKey();
         }

         public long getMessageKey() {
            return bean().getMessageKey();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasTxid()) {
                  output.writeBytes(1, bean.getTxid());
               }
               if (bean.hasMessageKey()) {
                  output.writeInt64(2, bean.getMessageKey());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasTxid()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(1, getTxid());
            }
            if (hasMessageKey()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(2, getMessageKey());
            }
            return size;
         }

         public static TransactionAddMessageBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new TransactionAddMessageBean().mergeUnframed(data);
         }

         public static TransactionAddMessageBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static TransactionAddMessageBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new TransactionAddMessageBuffer(data);
         }

         public static TransactionAddMessageBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static TransactionAddMessageBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            TransactionAddMessageBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static TransactionAddMessageBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               TransactionAddMessageBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static TransactionAddMessageBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static TransactionAddMessageBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=TransactionAddMessageBuffer.class )
               return false;
            
            return equals((TransactionAddMessageBuffer)obj);
         }
         
         public boolean equals(TransactionAddMessageBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=-1323227420 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.TRANSACTION_ADD_MESSAGE;
         }

      }

   }


   static public interface TransactionRemoveMessage extends org.fusesource.hawtbuf.proto.PBMessage<TransactionRemoveMessage.TransactionRemoveMessageBean, TransactionRemoveMessage.TransactionRemoveMessageBuffer>, Type.TypeCreatable {

      // optional bytes txid = 1;
      public boolean hasTxid();
      public org.fusesource.hawtbuf.Buffer getTxid();
      // optional bytes queueName = 2;
      public boolean hasQueueName();
      public org.fusesource.hawtbuf.AsciiBuffer getQueueName();
      // optional int64 messageKey = 3;
      public boolean hasMessageKey();
      public long getMessageKey();
      public TransactionRemoveMessageBean copy();
      public TransactionRemoveMessageBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class TransactionRemoveMessageBean implements TransactionRemoveMessage {

         TransactionRemoveMessageBuffer frozen;
         TransactionRemoveMessageBean bean;

         public TransactionRemoveMessageBean() {
            this.bean = this;
         }

         public TransactionRemoveMessageBean(TransactionRemoveMessageBean copy) {
            this.bean = copy;
         }

         public TransactionRemoveMessageBean copy() {
            return new TransactionRemoveMessageBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public TransactionRemoveMessageBuffer freeze() {
            if( frozen==null ) {
               frozen = new TransactionRemoveMessageBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(TransactionRemoveMessageBean other) {
            this.bean = this;
            this.f_txid = other.f_txid;
            this.b_txid = other.b_txid;
            this.f_queueName = other.f_queueName;
            this.b_queueName = other.b_queueName;
            this.f_messageKey = other.f_messageKey;
            this.b_messageKey = other.b_messageKey;
         }

         // optional bytes txid = 1;
         private org.fusesource.hawtbuf.Buffer f_txid = null;
         private boolean b_txid;

         public boolean hasTxid() {
            return bean.b_txid;
         }

         public org.fusesource.hawtbuf.Buffer getTxid() {
            return bean.f_txid;
         }

         public TransactionRemoveMessageBean setTxid(org.fusesource.hawtbuf.Buffer txid) {
            copyCheck();
            this.b_txid = true;
            this.f_txid = txid;
            return this;
         }

         public void clearTxid() {
            copyCheck();
            this.b_txid = false;
            this.f_txid = null;
         }

         // optional bytes queueName = 2;
         private org.fusesource.hawtbuf.AsciiBuffer f_queueName = null;
         private boolean b_queueName;

         public boolean hasQueueName() {
            return bean.b_queueName;
         }

         public org.fusesource.hawtbuf.AsciiBuffer getQueueName() {
            return bean.f_queueName;
         }

         public TransactionRemoveMessageBean setQueueName(org.fusesource.hawtbuf.AsciiBuffer queueName) {
            copyCheck();
            this.b_queueName = true;
            this.f_queueName = queueName;
            return this;
         }

         public void clearQueueName() {
            copyCheck();
            this.b_queueName = false;
            this.f_queueName = null;
         }

         // optional int64 messageKey = 3;
         private long f_messageKey = 0;
         private boolean b_messageKey;

         public boolean hasMessageKey() {
            return bean.b_messageKey;
         }

         public long getMessageKey() {
            return bean.f_messageKey;
         }

         public TransactionRemoveMessageBean setMessageKey(long messageKey) {
            copyCheck();
            this.b_messageKey = true;
            this.f_messageKey = messageKey;
            return this;
         }

         public void clearMessageKey() {
            copyCheck();
            this.b_messageKey = false;
            this.f_messageKey = 0;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasTxid() ) {
               sb.append(prefix+"txid: ");
               sb.append(getTxid());
               sb.append("\n");
            }
            if(  hasQueueName() ) {
               sb.append(prefix+"queueName: ");
               sb.append(getQueueName());
               sb.append("\n");
            }
            if(  hasMessageKey() ) {
               sb.append(prefix+"messageKey: ");
               sb.append(getMessageKey());
               sb.append("\n");
            }
            return sb;
         }

         public TransactionRemoveMessageBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public TransactionRemoveMessageBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 10:
                  setTxid(input.readBytes());
                  break;
               case 18:
                  setQueueName(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
                  break;
               case 24:
                  setMessageKey(input.readInt64());
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=TransactionRemoveMessageBean.class )
               return false;
            
            return equals((TransactionRemoveMessageBean)obj);
         }
         
         public boolean equals(TransactionRemoveMessageBean obj) {
            if (hasTxid() ^ obj.hasTxid() ) 
               return false;
            if (hasTxid() && ( !getTxid().equals(obj.getTxid()) ))
               return false;
            if (hasQueueName() ^ obj.hasQueueName() ) 
               return false;
            if (hasQueueName() && ( !getQueueName().equals(obj.getQueueName()) ))
               return false;
            if (hasMessageKey() ^ obj.hasMessageKey() ) 
               return false;
            if (hasMessageKey() && ( getMessageKey()!=obj.getMessageKey() ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=-342033899;
            if (hasTxid()) {
               rc ^= ( 2621119^getTxid().hashCode() );
            }
            if (hasQueueName()) {
               rc ^= ( 264320796^getQueueName().hashCode() );
            }
            if (hasMessageKey()) {
               rc ^= ( 302723320^(new Long(getMessageKey())).hashCode() );
            }
            return rc;
         }
         
         public TransactionRemoveMessageBean mergeFrom(TransactionRemoveMessage other) {
            copyCheck();
            if (other.hasTxid()) {
               setTxid(other.getTxid());
            }
            if (other.hasQueueName()) {
               setQueueName(other.getQueueName());
            }
            if (other.hasMessageKey()) {
               setMessageKey(other.getMessageKey());
            }
            return this;
         }

         public void clear() {
            clearTxid();
            clearQueueName();
            clearMessageKey();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_txid = new org.fusesource.hawtbuf.Buffer(b);
                  b_txid = true;
               } else {
                  f_txid = null;
                  b_txid = false;
               }
            }
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_queueName = new org.fusesource.hawtbuf.AsciiBuffer(b);
                  b_queueName = true;
               } else {
                  f_queueName = null;
                  b_queueName = false;
               }
            }
            f_messageKey = in.readLong();
            b_messageKey = true;
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_txid!=null ) {
               out.writeInt(bean.f_txid.getLength());
               out.write(bean.f_txid.getData(), bean.f_txid.getOffset(), bean.f_txid.getLength());
            } else {
               out.writeInt(-1);
            }
            if( bean.f_queueName!=null ) {
               out.writeInt(bean.f_queueName.getLength());
               out.write(bean.f_queueName.getData(), bean.f_queueName.getOffset(), bean.f_queueName.getLength());
            } else {
               out.writeInt(-1);
            }
            out.writeLong(bean.f_messageKey);
         }

         public Type toType() {
            return Type.TRANSACTION_REMOVE_MESSAGE;
         }

      }

      static public final class TransactionRemoveMessageBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<TransactionRemoveMessage.TransactionRemoveMessageBean, TransactionRemoveMessage.TransactionRemoveMessageBuffer>, TransactionRemoveMessage {

         private TransactionRemoveMessageBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private TransactionRemoveMessageBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private TransactionRemoveMessageBuffer(TransactionRemoveMessageBean bean) {
            this.bean = bean;
         }

         public TransactionRemoveMessageBean copy() {
            return bean().copy();
         }

         public TransactionRemoveMessageBuffer freeze() {
            return this;
         }

         private TransactionRemoveMessageBean bean() {
            if (bean == null) {
               try {
                  bean = new TransactionRemoveMessageBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional bytes txid = 1;
         public boolean hasTxid() {
            return bean().hasTxid();
         }

         public org.fusesource.hawtbuf.Buffer getTxid() {
            return bean().getTxid();
         }

         // optional bytes queueName = 2;
         public boolean hasQueueName() {
            return bean().hasQueueName();
         }

         public org.fusesource.hawtbuf.AsciiBuffer getQueueName() {
            return bean().getQueueName();
         }

         // optional int64 messageKey = 3;
         public boolean hasMessageKey() {
            return bean().hasMessageKey();
         }

         public long getMessageKey() {
            return bean().getMessageKey();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasTxid()) {
                  output.writeBytes(1, bean.getTxid());
               }
               if (bean.hasQueueName()) {
                  output.writeBytes(2, bean.getQueueName());
               }
               if (bean.hasMessageKey()) {
                  output.writeInt64(3, bean.getMessageKey());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasTxid()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(1, getTxid());
            }
            if (hasQueueName()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(2, getQueueName());
            }
            if (hasMessageKey()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(3, getMessageKey());
            }
            return size;
         }

         public static TransactionRemoveMessageBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new TransactionRemoveMessageBean().mergeUnframed(data);
         }

         public static TransactionRemoveMessageBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static TransactionRemoveMessageBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new TransactionRemoveMessageBuffer(data);
         }

         public static TransactionRemoveMessageBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static TransactionRemoveMessageBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            TransactionRemoveMessageBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static TransactionRemoveMessageBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               TransactionRemoveMessageBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static TransactionRemoveMessageBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static TransactionRemoveMessageBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=TransactionRemoveMessageBuffer.class )
               return false;
            
            return equals((TransactionRemoveMessageBuffer)obj);
         }
         
         public boolean equals(TransactionRemoveMessageBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=2032825701 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.TRANSACTION_REMOVE_MESSAGE;
         }

      }

   }


   static public interface TransactionCommit extends org.fusesource.hawtbuf.proto.PBMessage<TransactionCommit.TransactionCommitBean, TransactionCommit.TransactionCommitBuffer>, Type.TypeCreatable {

      // optional bytes txid = 1;
      public boolean hasTxid();
      public org.fusesource.hawtbuf.Buffer getTxid();
      public TransactionCommitBean copy();
      public TransactionCommitBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class TransactionCommitBean implements TransactionCommit {

         TransactionCommitBuffer frozen;
         TransactionCommitBean bean;

         public TransactionCommitBean() {
            this.bean = this;
         }

         public TransactionCommitBean(TransactionCommitBean copy) {
            this.bean = copy;
         }

         public TransactionCommitBean copy() {
            return new TransactionCommitBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public TransactionCommitBuffer freeze() {
            if( frozen==null ) {
               frozen = new TransactionCommitBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(TransactionCommitBean other) {
            this.bean = this;
            this.f_txid = other.f_txid;
            this.b_txid = other.b_txid;
         }

         // optional bytes txid = 1;
         private org.fusesource.hawtbuf.Buffer f_txid = null;
         private boolean b_txid;

         public boolean hasTxid() {
            return bean.b_txid;
         }

         public org.fusesource.hawtbuf.Buffer getTxid() {
            return bean.f_txid;
         }

         public TransactionCommitBean setTxid(org.fusesource.hawtbuf.Buffer txid) {
            copyCheck();
            this.b_txid = true;
            this.f_txid = txid;
            return this;
         }

         public void clearTxid() {
            copyCheck();
            this.b_txid = false;
            this.f_txid = null;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasTxid() ) {
               sb.append(prefix+"txid: ");
               sb.append(getTxid());
               sb.append("\n");
            }
            return sb;
         }

         public TransactionCommitBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public TransactionCommitBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 10:
                  setTxid(input.readBytes());
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=TransactionCommitBean.class )
               return false;
            
            return equals((TransactionCommitBean)obj);
         }
         
         public boolean equals(TransactionCommitBean obj) {
            if (hasTxid() ^ obj.hasTxid() ) 
               return false;
            if (hasTxid() && ( !getTxid().equals(obj.getTxid()) ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=1358020325;
            if (hasTxid()) {
               rc ^= ( 2621119^getTxid().hashCode() );
            }
            return rc;
         }
         
         public TransactionCommitBean mergeFrom(TransactionCommit other) {
            copyCheck();
            if (other.hasTxid()) {
               setTxid(other.getTxid());
            }
            return this;
         }

         public void clear() {
            clearTxid();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_txid = new org.fusesource.hawtbuf.Buffer(b);
                  b_txid = true;
               } else {
                  f_txid = null;
                  b_txid = false;
               }
            }
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_txid!=null ) {
               out.writeInt(bean.f_txid.getLength());
               out.write(bean.f_txid.getData(), bean.f_txid.getOffset(), bean.f_txid.getLength());
            } else {
               out.writeInt(-1);
            }
         }

         public Type toType() {
            return Type.TRANSACTION_COMMIT;
         }

      }

      static public final class TransactionCommitBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<TransactionCommit.TransactionCommitBean, TransactionCommit.TransactionCommitBuffer>, TransactionCommit {

         private TransactionCommitBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private TransactionCommitBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private TransactionCommitBuffer(TransactionCommitBean bean) {
            this.bean = bean;
         }

         public TransactionCommitBean copy() {
            return bean().copy();
         }

         public TransactionCommitBuffer freeze() {
            return this;
         }

         private TransactionCommitBean bean() {
            if (bean == null) {
               try {
                  bean = new TransactionCommitBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional bytes txid = 1;
         public boolean hasTxid() {
            return bean().hasTxid();
         }

         public org.fusesource.hawtbuf.Buffer getTxid() {
            return bean().getTxid();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasTxid()) {
                  output.writeBytes(1, bean.getTxid());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasTxid()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(1, getTxid());
            }
            return size;
         }

         public static TransactionCommitBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new TransactionCommitBean().mergeUnframed(data);
         }

         public static TransactionCommitBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static TransactionCommitBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new TransactionCommitBuffer(data);
         }

         public static TransactionCommitBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static TransactionCommitBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            TransactionCommitBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static TransactionCommitBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               TransactionCommitBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static TransactionCommitBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static TransactionCommitBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=TransactionCommitBuffer.class )
               return false;
            
            return equals((TransactionCommitBuffer)obj);
         }
         
         public boolean equals(TransactionCommitBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=-597604811 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.TRANSACTION_COMMIT;
         }

      }

   }


   static public interface TransactionRollback extends org.fusesource.hawtbuf.proto.PBMessage<TransactionRollback.TransactionRollbackBean, TransactionRollback.TransactionRollbackBuffer>, Type.TypeCreatable {

      // optional bytes txid = 1;
      public boolean hasTxid();
      public org.fusesource.hawtbuf.Buffer getTxid();
      public TransactionRollbackBean copy();
      public TransactionRollbackBuffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);

      static public final class TransactionRollbackBean implements TransactionRollback {

         TransactionRollbackBuffer frozen;
         TransactionRollbackBean bean;

         public TransactionRollbackBean() {
            this.bean = this;
         }

         public TransactionRollbackBean(TransactionRollbackBean copy) {
            this.bean = copy;
         }

         public TransactionRollbackBean copy() {
            return new TransactionRollbackBean(bean);
         }

         public boolean frozen() {
            return frozen!=null;
         }

         public TransactionRollbackBuffer freeze() {
            if( frozen==null ) {
               frozen = new TransactionRollbackBuffer(bean);
               assert deepFreeze();
            }
            return frozen;
         }

         private boolean deepFreeze() {
            frozen.serializedSizeUnframed();
            return true;
         }

         private void copyCheck() {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            if (bean != this) {
               copy(bean);
            }
         }

         private void copy(TransactionRollbackBean other) {
            this.bean = this;
            this.f_txid = other.f_txid;
            this.b_txid = other.b_txid;
         }

         // optional bytes txid = 1;
         private org.fusesource.hawtbuf.Buffer f_txid = null;
         private boolean b_txid;

         public boolean hasTxid() {
            return bean.b_txid;
         }

         public org.fusesource.hawtbuf.Buffer getTxid() {
            return bean.f_txid;
         }

         public TransactionRollbackBean setTxid(org.fusesource.hawtbuf.Buffer txid) {
            copyCheck();
            this.b_txid = true;
            this.f_txid = txid;
            return this;
         }

         public void clearTxid() {
            copyCheck();
            this.b_txid = false;
            this.f_txid = null;
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasTxid() ) {
               sb.append(prefix+"txid: ");
               sb.append(getTxid());
               sb.append("\n");
            }
            return sb;
         }

         public TransactionRollbackBean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
            return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
         }

         public TransactionRollbackBean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            copyCheck();
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 10:
                  setTxid(input.readBytes());
                  break;
               }
            }
         }
         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=TransactionRollbackBean.class )
               return false;
            
            return equals((TransactionRollbackBean)obj);
         }
         
         public boolean equals(TransactionRollbackBean obj) {
            if (hasTxid() ^ obj.hasTxid() ) 
               return false;
            if (hasTxid() && ( !getTxid().equals(obj.getTxid()) ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=984618642;
            if (hasTxid()) {
               rc ^= ( 2621119^getTxid().hashCode() );
            }
            return rc;
         }
         
         public TransactionRollbackBean mergeFrom(TransactionRollback other) {
            copyCheck();
            if (other.hasTxid()) {
               setTxid(other.getTxid());
            }
            return this;
         }

         public void clear() {
            clearTxid();
         }

         public void readExternal(java.io.DataInput in) throws java.io.IOException {
            assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
            bean = this;
            frozen = null;
            {
               int size = in.readInt();
               if( size>=0 ) {
                  byte b[] = new byte[size];
                  in.readFully(b);
                  f_txid = new org.fusesource.hawtbuf.Buffer(b);
                  b_txid = true;
               } else {
                  f_txid = null;
                  b_txid = false;
               }
            }
         }

         public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
            if( bean.f_txid!=null ) {
               out.writeInt(bean.f_txid.getLength());
               out.write(bean.f_txid.getData(), bean.f_txid.getOffset(), bean.f_txid.getLength());
            } else {
               out.writeInt(-1);
            }
         }

         public Type toType() {
            return Type.TRANSACTION_ROLLBACK;
         }

      }

      static public final class TransactionRollbackBuffer implements org.fusesource.hawtbuf.proto.MessageBuffer<TransactionRollback.TransactionRollbackBean, TransactionRollback.TransactionRollbackBuffer>, TransactionRollback {

         private TransactionRollbackBean bean;
         private org.fusesource.hawtbuf.Buffer buffer;
         private int size=-1;
         private int hashCode;

         private TransactionRollbackBuffer(org.fusesource.hawtbuf.Buffer buffer) {
            this.buffer = buffer;
         }

         private TransactionRollbackBuffer(TransactionRollbackBean bean) {
            this.bean = bean;
         }

         public TransactionRollbackBean copy() {
            return bean().copy();
         }

         public TransactionRollbackBuffer freeze() {
            return this;
         }

         private TransactionRollbackBean bean() {
            if (bean == null) {
               try {
                  bean = new TransactionRollbackBean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
                  bean.frozen=this;
               } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
                  throw new RuntimeException(e);
               } catch (java.io.IOException e) {
                  throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
               }
            }
            return bean;
         }

         public String toString() {
            return bean().toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            return bean().toString(sb, prefix);
         }

         // optional bytes txid = 1;
         public boolean hasTxid() {
            return bean().hasTxid();
         }

         public org.fusesource.hawtbuf.Buffer getTxid() {
            return bean().getTxid();
         }

         public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
            if( buffer !=null ) {
               return buffer;
            }
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
         }

         public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
            return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
         }

         public byte[] toUnframedByteArray() {
            return toUnframedBuffer().toByteArray();
         }

         public byte[] toFramedByteArray() {
            return toFramedBuffer().toByteArray();
         }

         public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            output.writeRawVarint32(serializedSizeUnframed());
            writeUnframed(output);
         }

         public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeFramed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
            org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
            writeUnframed(codedOutput);
            codedOutput.flush();
         }

         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (buffer == null) {
               int size = serializedSizeUnframed();
               buffer = output.getNextBuffer(size);
               org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
               if( buffer == null ) {
                  buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
                  original = output;
                  output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
               }
               if (bean.hasTxid()) {
                  output.writeBytes(1, bean.getTxid());
               }
               if( original !=null ) {
                  output.checkNoSpaceLeft();
                  output = original;
                  output.writeRawBytes(buffer);
               }
            } else {
               output.writeRawBytes(buffer);
            }
         }

         public int serializedSizeFramed() {
            int t = serializedSizeUnframed();
            return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
         }

         public int serializedSizeUnframed() {
            if (buffer != null) {
               return buffer.length;
            }
            if (size != -1)
               return size;

            size = 0;
            if (hasTxid()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(1, getTxid());
            }
            return size;
         }

         public static TransactionRollbackBean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new TransactionRollbackBean().mergeUnframed(data);
         }

         public static TransactionRollbackBean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
         }

         public static TransactionRollbackBuffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new TransactionRollbackBuffer(data);
         }

         public static TransactionRollbackBuffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static TransactionRollbackBuffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            int length = data.readRawVarint32();
            int oldLimit = data.pushLimit(length);
            TransactionRollbackBuffer rc = parseUnframed(data.readRawBytes(length));
            data.popLimit(oldLimit);
            return rc;
         }

         public static TransactionRollbackBuffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            try {
               org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
               TransactionRollbackBuffer rc = parseFramed(input);
               input.checkLastTagWas(0);
               return rc;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw e;
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }

         public static TransactionRollbackBuffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
         }

         public static TransactionRollbackBuffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=TransactionRollbackBuffer.class )
               return false;
            
            return equals((TransactionRollbackBuffer)obj);
         }
         
         public boolean equals(TransactionRollbackBuffer obj) {
            return toUnframedBuffer().equals(obj.toUnframedBuffer());
         }
         
         public int hashCode() {
            if( hashCode==0 ) {
            hashCode=1340630690 ^ toUnframedBuffer().hashCode();
            }
            return hashCode;
         }
         
         public boolean frozen() {
            return true;
         }
         public Type toType() {
            return Type.TRANSACTION_ROLLBACK;
         }

      }

   }

}
